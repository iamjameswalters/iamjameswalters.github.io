<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>james.walters.click</title><link href="https://james.walters.click/" rel="alternate"></link><link href="https://james.walters.click/feeds/all.atom.xml" rel="self"></link><id>https://james.walters.click/</id><updated>2024-09-27T00:00:00-04:00</updated><subtitle>Thoughts and lessons learned along the path of software development.</subtitle><entry><title>Weeknotes 9/27: The One With Mario and Zelda</title><link href="https://james.walters.click/weeknotes-927-the-one-with-mario-and-zelda.html" rel="alternate"></link><published>2024-09-27T00:00:00-04:00</published><updated>2024-09-27T00:00:00-04:00</updated><author><name>James Walters</name></author><id>tag:james.walters.click,2024-09-27:/weeknotes-927-the-one-with-mario-and-zelda.html</id><summary type="html">&lt;p&gt;Hello, hello! Just a few things this week:&lt;/p&gt;
&lt;h4&gt;Gaming Again üéÆÔ∏è&lt;/h4&gt;
&lt;p&gt;I've spent some time playing a few videogames lately, a pastime I've had very little time for in this phase of life. Accordingly, I'm not going to call myself a "gamer" in any sense recognizable in the modern world. But ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello, hello! Just a few things this week:&lt;/p&gt;
&lt;h4&gt;Gaming Again üéÆÔ∏è&lt;/h4&gt;
&lt;p&gt;I've spent some time playing a few videogames lately, a pastime I've had very little time for in this phase of life. Accordingly, I'm not going to call myself a "gamer" in any sense recognizable in the modern world. But, I'll you what I've been playing.&lt;/p&gt;
&lt;p&gt;Mostly, that's been Super Mario Wonder, which is a complete and total delight of a game. I've had a blast with it everytime I've picked it up. They've done such a delightful job at making this game centered not so much around the completion of obstacle courses, but discoveries. Some pipes you can push, some of them go up and down like a teeter-totter. Some of them take you into the background of the level. Special Wonder Flowers take you down an Alice in Wonderland rabbithole and transform the course into something on another plane.&lt;/p&gt;
&lt;p&gt;There are new powers too (such as the flagship elephant power), but they aren't gimmicks thrown in to justify making a new 2D Mario platformer. It's one of the most exciting games I've played in years. In the long run, it might just surpass Mario Odyssey as my favorite Switch game.&lt;/p&gt;
&lt;p&gt;And I can't help but be delighted at the Captain Toad cameos&amp;mdash;and hopeful that this means Nintendo hasn't forgotten about him? üëÄÔ∏è&lt;/p&gt;
&lt;h6&gt;Echoes of Wisdom&lt;/h6&gt;
&lt;p&gt;But the big news is the new Zelda game that just came out yesterday&amp;mdash;and this time it really is a &lt;em&gt;Zelda&lt;/em&gt; game! The Legend of Zelda: Echoes of Wisdom is a new 2D platformer (or is it? more in a moment) where you actually get to play as the titular princess for once. Set in the beautiful and engaging visual style of the Link's Awakening remake from a few years back (by the excellent folks at Grezzo, to whom I dearly hope Nintendo continues to give remake projects&amp;mdash;come on, &lt;a href="https://en.wikipedia.org/wiki/The_Legend_of_Zelda:_Oracle_of_Seasons_and_Oracle_of_Ages"&gt;Oracles&lt;/a&gt;!, this game has you casting "echoes" of things you've encountered along the way: boxes, tables, bed, trampolines, even moblins. &lt;/p&gt;
&lt;p&gt;I cracked it open just last night, and it looks like a brilliant port of Tears of the Kingdom's out of the box &lt;a href="https://wiki.c2.com/?ThereIsMoreThanOneWayToDoIt="&gt;TIMTOWTDI&lt;/a&gt; puzzle philosophy to the 2D dungeon crawling genre. After playing it some, I'm actually not convinced that this is a purely 2D game. It's not &lt;a href="https://en.wikipedia.org/wiki/2.5D"&gt;2.5D&lt;/a&gt; in the way it's traditionally understood, but it's something orthogonal to it. If it's not a 3D game, you're certainly approaching it. You're definitely walking around within a 2D plane, and this is no more true than in the many sidescrolling sections, a gameplay element with only a few instances in Link's Awakening, but which has already made more appearances here in Echoes before the first dungeon's even over with (and yes, this game has dungeons!). However, because of the way that you now have access to higher points (through building towers of tables and beds and crates) and lower points (through diving, etc.) in the environment, it encourages you to think of the place as not so neatly cut up into different "floors" anymore (a strict idiom of the 2D games of yore).&lt;/p&gt;
&lt;p&gt;But there really is this restriction to a 2D plane that sort of reigns in the excesses of BotW/TotK's physics-sandbox puzzle solving. I won't offer much critique of TotK because I've barely played it (sorry, busy these days!), but despite some gripes I was much more optimistic overall about the way TotK encouraged you to solve problems &lt;em&gt;creatively.&lt;/em&gt; In Echoes, that creative problem solving out of building blocks you've already seen is center stage, but without the complexity of a full 3D physics engine, everything seems more straightforward to reason about. And, that means you can't make "shrines" or other areas that are purely physics puzzles&amp;mdash;because you can't make the physics sandbox the main attraction, you still have to build a traditional maze and dungeon, which requires at least a certain level of &lt;em&gt;logical&lt;/em&gt; puzzle solving. The result so far is feeling like a perfect blend of both: individual screens or rooms where I have to creatively use echoes to scale a wall or surpass as challenging to get to the next room, but all of these rooms are part of a larger dungeon that you have to reason through. It's shaping up to be a rich and powerful combination.&lt;/p&gt;
&lt;p&gt;We're light on story so far, but that's to be expected from Nintendo these days, and I'm not holding this game out to be big lore builder. But who knows? Maybe they'll surprise me.&lt;/p&gt;
&lt;p&gt;8/10 so far from me, and I've barely started, so I'm sure that might tick up another notch!&lt;/p&gt;
&lt;h4&gt;Settling in at the Office üè¢Ô∏è&lt;/h4&gt;
&lt;p&gt;After a few weeks, I'm really settling into my office workflow. My former desk was adjacent to the main aisle, which was more than a little distracting. So, I stuffed myself over in an unoccupied corner where I finally found a cubicle with internet (our IT folks cleaned up the patch panel after everyone left the office!). It happened to have a pair of pretty nice monitors sitting there! After scavenging the right cables from some other desks, I've got a pretty nice dual screen setup. üòéÔ∏è&lt;/p&gt;
&lt;p&gt;I also got spousal approval to begin shopping for a mechanical keyboard to accompany this setup. I'm also looking at a mouse kit that comes with all the hardware and you 3D print an enclosure. Interested to peruse some of the available designs!&lt;/p&gt;
&lt;p&gt;All in all, it's been quite good. I don't want a permanent return to office, but having the flexibility to use that environment when it's advantageous to me is really nice.&lt;/p&gt;
&lt;p&gt;See you next week!&lt;/p&gt;</content><category term="Weeknotes"></category><category term="hardware"></category><category term="office"></category><category term="music"></category></entry><entry><title>Weeknotes 9/20: The One With The New Laptop</title><link href="https://james.walters.click/weeknotes-920-the-one-with-the-new-laptop.html" rel="alternate"></link><published>2024-09-20T00:00:00-04:00</published><updated>2024-09-20T00:00:00-04:00</updated><author><name>James Walters</name></author><id>tag:james.walters.click,2024-09-20:/weeknotes-920-the-one-with-the-new-laptop.html</id><summary type="html">&lt;p&gt;Hello, dear reader! Let me tell you what's been going on this week.&lt;/p&gt;
&lt;h4&gt;New Laptop! üôåÔ∏è&lt;/h4&gt;
&lt;p&gt;I've got my new work laptop, and it's excellent! I've got a nice new Dell XPS 15 with an Intel i7-13620H, which Windows tells me has 10 real cores and 16 logical processors. I assume ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello, dear reader! Let me tell you what's been going on this week.&lt;/p&gt;
&lt;h4&gt;New Laptop! üôåÔ∏è&lt;/h4&gt;
&lt;p&gt;I've got my new work laptop, and it's excellent! I've got a nice new Dell XPS 15 with an Intel i7-13620H, which Windows tells me has 10 real cores and 16 logical processors. I assume this means they aren't all hyperthreaded, only six of them are? Sounds like a big.Little thing. Anyway, it also has 32GB of RAM. It comes with Windows 11, but despite my being a &lt;a href="https://james.walters.click/tag/linux-grandpa.html"&gt;Linux Grandpa&lt;/a&gt;, I've found it fairly inoffensive so far. Also, I've got WSL this time around! I've barely gotten to play with it yet, but I'm thrilled to do so soon.&lt;/p&gt;
&lt;p&gt;The XPS is a nice machine, looks to be made of a fairly thick milled aluminum! It feels bulletproof. And whereas my old laptop built our Remix app in about 1m20s&amp;mdash;1m40s, this machine does it in 2s. ü§óÔ∏è&lt;/p&gt;
&lt;p&gt;It would sure be nice if I could manage to justify a &lt;a href="https://www.amazon.com/dp/B0CCP6HLZR"&gt;new keyboard&lt;/a&gt; I could carry around with this new laptop...&lt;/p&gt;
&lt;h4&gt;Back in the Office üè¢Ô∏è&lt;/h4&gt;
&lt;p&gt;Speaking of which, I had to go into the office to pick up this new machine, and I actually spent the day working there. I've needed a place where I can concentrate and get some work done, since my home is a busy place most days. I've been spending a lot of time out at coffee shops, but those can be just as distracting sometimes. My wonderful new headphones help, but not always entirely.&lt;/p&gt;
&lt;p&gt;Also, when programming, there are too many times where what I really need is to step away for a few minutes and go for a walk. But of course, I can't do that and leave all my stuff at a coffee shop.&lt;/p&gt;
&lt;p&gt;So, I decided to spend some more time at the office. It gives me a relatively quiet place to work, allows me to step away from my things without concern, and I get the added bonus of not having to faff with the VPN.&lt;/p&gt;
&lt;p&gt;While there, I got to enjoy my smalltown downtown in a way I haven't done since the pre-pandemic days. Our town is on a riverfront, and I went and had my lunch down there. Afterwards, I popped into the local candy store. I have uncanny luck for walking in at the precise moment where they're pressing cinnamon red hots, and offering samples (still warm!).&lt;/p&gt;
&lt;h4&gt;Joining the Choir üé∂Ô∏è&lt;/h4&gt;
&lt;p&gt;My church puts together a choir about once per quarter, and I joined this time around. It's been very rewarding to use a lot of musical mental muscles I'd forgotten were there! It's been challenging to use a lot of vocal muscles that have been neglected. üòÖÔ∏è&lt;/p&gt;
&lt;p&gt;On a related note, I also bought a new hymnal recently. Perhaps I'll discuss that soon.&lt;/p&gt;</content><category term="Weeknotes"></category><category term="hardware"></category><category term="office"></category><category term="music"></category></entry><entry><title>Weeknotes 9/13: The Unlucky One?</title><link href="https://james.walters.click/weeknotes-913-the-unlucky-one.html" rel="alternate"></link><published>2024-09-13T00:00:00-04:00</published><updated>2024-09-13T00:00:00-04:00</updated><author><name>James Walters</name></author><id>tag:james.walters.click,2024-09-13:/weeknotes-913-the-unlucky-one.html</id><summary type="html">&lt;p&gt;Here we are, definitely one week after my last Weeknotes entry. üôÇÔ∏è Here's what's going on this week:&lt;/p&gt;
&lt;h4&gt;New Headphone are Awesome üéßÔ∏è&lt;/h4&gt;
&lt;p&gt;Last time I mentioned my new Bose noise-cancelling headphones as a replacement for my Raycon earbuds to help create a more sound-tolerant workflow. They've been great! And I'm quite ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here we are, definitely one week after my last Weeknotes entry. üôÇÔ∏è Here's what's going on this week:&lt;/p&gt;
&lt;h4&gt;New Headphone are Awesome üéßÔ∏è&lt;/h4&gt;
&lt;p&gt;Last time I mentioned my new Bose noise-cancelling headphones as a replacement for my Raycon earbuds to help create a more sound-tolerant workflow. They've been great! And I'm quite happy to see that this tech, while still premium, is less expensive than it used to be. Really hoping to do a lot more working from coffee shops and the like.&lt;/p&gt;
&lt;h4&gt;Remix üîÅÔ∏è&lt;/h4&gt;
&lt;p&gt;I haven't spent a ton of time on here talking about it, mainly because I'm a Python/Django guy at heart. But at my job these days, I've been brought in to help with our new Remix site.&lt;/p&gt;
&lt;p&gt;As you might expect, I have mixed feelings about it. On the whole, I'm really a &lt;a href="https://htmx.org/essays/hypermedia-driven-applications/"&gt;hypermedia&lt;/a&gt; guy, and I'm just not a fan of all of the extra complexity reactive frontends add to a site. But my 30,000 foot take is that &lt;em&gt;if&lt;/em&gt; you're going to build the whole site out in React, &lt;em&gt;and if&lt;/em&gt; you're going to use client-side routing, &lt;em&gt;and if&lt;/em&gt; you're going to do server-side generation, then it's a nice choice that usually keeps you more focused on your application logic than with wiring all of that up.&lt;/p&gt;
&lt;p&gt;But this isn't a comprehensive review of Remix, I probably don't even have enough experience to do one. I just want to talk about whatever it is that I'm working through at the moment.&lt;/p&gt;
&lt;p&gt;At this moment, I've been pounding my head against the wall trying to understand how index routes work, since I had an idea about refactoring a route to use them. In Remix, you're doing nested routing, which means each component gets a route, and usually each component has an &lt;code&gt;&amp;lt;Outlet /&amp;gt;&lt;/code&gt; where the child components get rendered. It basically looks like a telescope. Let's say you're setting up a detail view at something like &lt;code&gt;app/things/123&lt;/code&gt;: there's some framing stuff around the edges, UI controls or whatnot that are the same for every item, and then the item's specifics get loaded into this parent route's outlet. But what if you just navigate to &lt;code&gt;app/things/&lt;/code&gt;? I'd like &lt;em&gt;something&lt;/em&gt; to live in that outlet until I load in an item's details. The solution to this in Remix is an index route. The documentation says pitifully little about index routes, other than an &lt;a href="https://remix.run/docs/en/main/start/tutorial#index-routes"&gt;example in the tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I had a terrible ordeal getting this set up, but it turns out we use &lt;a href="https://remix.run/docs/en/main/file-conventions/routes#folders-for-organization"&gt;custom folder routing&lt;/a&gt; in our app, so it had to be wired up a little differently. üôÉÔ∏è&lt;/p&gt;
&lt;p&gt;I'm still fairly new to understanding a lot of Remix's general patterns, so stay tuned for more.&lt;/p&gt;
&lt;h4&gt;Planning a Django Refactor üõ†Ô∏è&lt;/h4&gt;
&lt;p&gt;Aside from the Remix app, for a long time I've desired to undertake a refactor of the first app I ever worked on, which is a Django application. After giving it a lot of thought, I think I've identified the following improvements I'd like to make:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Vanilla views&lt;/strong&gt; - The hairiest file in our entire project is views.py. We used class-based views over function views, and I don't regret that decision. But I am at the point where I see all of the wisdom that &lt;a href="https://pypi.org/project/django-vanilla-views/"&gt;django-vanilla-views&lt;/a&gt; brings to the table. I think we could trim views.py by at least 25%, while also making it easier to understand and reason about.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;django-auto-prefetch&lt;/strong&gt; - I took care of the worst N+1 bugs in our app during development, but there are still some that remain that simply aren't noticeable yet because those views don't handle enough data to make them a pain point. In my opinion, this is one of the worst rough edges of Django, and I really think we need a solution built directly into the framework. N+1 bugs are very nearly a design feature of the ORM. Back when I was tracking these down with django-debug-toolbar, I caught most of them, but there were still some that I couldn't track down. Although I don't just want to paper over problems and I'd like to learn how to write better ORM code, at this point I'm interested to see if &lt;a href="https://pypi.org/project/django-auto-prefetch/"&gt;django-auto-prefetch&lt;/a&gt; will solve these harder to pin down bugs. If it does, hats off to Adam Johnson!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template complexity&lt;/strong&gt; - one of the weak points in our current app is the way the templates are arranged. The main reason for that is that we were experimenting and learning htmx at the same time, and we were trying to figure out what the best patterns were. Where that's left us today however is a place where we have a fair amount of duplication across our templates, with some being rendered on initial page loads, and other parts of the page getting fetched again by htmx. I need to take a look at &lt;a href="https://pypi.org/project/django-template-partials/"&gt;template partials&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/stable/ref/templates/builtins/#include"&gt;includes&lt;/a&gt;, etc. and find something to deal with template complexity and make things more DRY.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Form errors&lt;/strong&gt; - I was lazy and built a lot of forms without proper error rendering, so many forms will just appear not to do anything if they had an error in their input. This was tolerable only because the two people using the editing interface (where all the forms are) of this app were the people developing it. üôÇÔ∏è But it's still a shortcoming, and one that ought to be fixed easily enough.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unique constraints&lt;/strong&gt; - related to the former, we developed our app on top of Django 4.0. In 4.1, we got the wonderful added feature that &lt;a href="https://docs.djangoproject.com/en/4.1/releases/4.1/#validation-of-constraints"&gt;unique constraints on models would now be included in model validation&lt;/a&gt; (instead of operating merely at the database level). This means that instead of getting a DB error when you tried to save (which would throw an exception that would 500 your user if you didn't handle it), it would now fail in the model validation which would bubble back up to your user in a form error. Huzzah! Less work for me! The problem, though, was that we aren't using an officially supported database: we're using Microsoft SQL server, which means we use Microsoft's &lt;a href="https://pypi.org/project/mssql-django/"&gt;mssql-django&lt;/a&gt; backend. And the new unique constraint model validation was not supported in mssql-django. ‚òπÔ∏è So at the time, I gutted all the extra unique constraints that were just blowing up with 500s. These days, however, that support has been added, so now I should go back and add a bunch of unique constraints.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I can only undertake these tasks as time permits, and I'm not sure I'll find time even before the end of the year, given the hustle we're in to get our Remix app out the door. But the planning has been valuable, and shows the fruit of experience that I didn't have when first I worked on this project.&lt;/p&gt;
&lt;h4&gt;Learning Piano Scales üéπÔ∏è&lt;/h4&gt;
&lt;p&gt;On a non-tech front, I've been on a slow journey to ramp up my proficiency at the piano. I have a long background in music, but mainly singing, and I'm a mediocre guitarist. Having decided I've plateued with the instrument, I'm looking to lean into the keys. There are several reasons, not least of which is the fact that if you're proficient at the keyboard, you can use software to make all kinds of music these days. It really is the one instrument to rule them all.&lt;/p&gt;
&lt;p&gt;Anyways, I've learned a couple of things recently that I thought I'd share.&lt;/p&gt;
&lt;h5&gt;Understanding scales in the flat keys&lt;/h5&gt;
&lt;p&gt;The place for me to begin is getting an elementary understanding of all the major scales. Scales will be a part of my practice routine until the day I die, so I'm not looking to be at a high level with them out of the gate, but I'd like to know and understand the proper technique to play them for all of the pitch classes.&lt;/p&gt;
&lt;p&gt;I started with C major (no sharps or flats) and started building my way through the sharp keys, adding one sharp at a time. This was easy to wrap my head around: you're just playing the white keys, except whenever you encounter a sharp, which means you raise your finger up to a black key. I did this all the way through B major (five sharps).&lt;/p&gt;
&lt;p&gt;But the flat keys were a different story. I started with Gb major (seven flats), and as I moved to Db major and Ab major, I found I couldn't keep my fingerings consistent. It finally dawned on me that the best way to think about the flat keys is that Gb major is the fundamental "shape" of the flat key scales&amp;mdash;that is, the fingerings you use in Gb are the ones you want to use everywhere, but as you remove flats from the key signature, those become the exceptions. &lt;/p&gt;
&lt;p&gt;The effect of this is for instance, in Gb, I play Gb-Ab-Bb (the cluster of three black keys) with my 2nd, 3rd, and 4th fingers. The secret for me was realizing that in whatever scale you're in, you should &lt;em&gt;always&lt;/em&gt; play those notes with those fingers. As you start removing flats, you'll move those fingers down to white keys, but whenever I play Bb for instance, I should always aim to play it with my 4th finger, from Gb (seven flats) all the way down to F (one flat, the Bb). Doing so will keep my hand in the right place for playing the rest of the scale, particularly in descending directions (in the right hand, anyway).&lt;/p&gt;
&lt;h5&gt;There's no shortcut for sightreading&lt;/h5&gt;
&lt;p&gt;Once I've got a command of my scales, I'll be looking to throw myself into sightreading. I've been a musician long enough to know that there are two kinds of people: those who can read music, and those who can't. This is a topic of its own, which I cannot afford to plunge into here. Suffice it to say that I find a fair analogy in literacy and illiteracy (or preliteracy, if you like), with similar advantages and liabilities to each. But aside from the importance of learning to sightread, I also understand the importance of learning to sightread &lt;em&gt;early:&lt;/em&gt; not unlike reading, the longer you wait to get started, the harder it will be and the slower you will make progress. Learning to sightsing was a challenge. I couldn't read a guitar part to save my life. I'm hoping to get started firmly on the right foot with piano.&lt;/p&gt;
&lt;p&gt;I'm hoping to play out of my hymnal for my small group soon, and as my hymnal has chords notated in it, I thought one day, "maybe I should just fast-track my way to learning all the chords, and then I start playing out of the hymnal with the chord notations." &lt;/p&gt;
&lt;p&gt;After turning it over though, I quickly realized that this would be quite a challenge. It's one thing to learn a bunch of triads, it's another to learn all the &lt;em&gt;voicings&lt;/em&gt; you can use with a chord. And it's yet another thing entirely to understand how to choose the right voicings to navigate the progression in front of you. You have to develop a strong and intimate knowledge of these things before you can compentently play your way through a chord chart.&lt;/p&gt;
&lt;p&gt;How do you develop that? The best answer is by playing other people's music. Composers and arrangers are really good at thinking through intelligent ways to voice things. And the best way to start to internalize that and develop your own intuition about how to voice chords is to play music that is well written and arranged. &lt;/p&gt;
&lt;p&gt;And how do you play other people's music? Well, you have to &lt;em&gt;read&lt;/em&gt; it. And the better you are at sightreading what's on the page, the easier it will be to get on with playing all the music that is going to start shaping your playing and developing your musical intuition.&lt;/p&gt;
&lt;p&gt;There is no shortcut for sightreading.&lt;/p&gt;
&lt;p&gt;But once you can, it's worth mentioning that a hymnal is a &lt;em&gt;fantastic&lt;/em&gt; collection of bite-sized tunes with excellent melodies that are expertly arranged (in many cases over centuries). The average hymnal contains 400-700 tunes. Whether you're religious or not, this is a goldmine of sightreading material.&lt;/p&gt;
&lt;h4&gt;Fin&lt;/h4&gt;
&lt;p&gt;Thanks for reading, see you next week!&lt;/p&gt;</content><category term="Weeknotes"></category><category term="hardware"></category><category term="Django"></category><category term="Remix"></category><category term="music"></category></entry><entry><title>Weeknotes 8/31: The Inaugural One</title><link href="https://james.walters.click/weeknotes-831-the-inaugural-one.html" rel="alternate"></link><published>2024-08-31T00:00:00-04:00</published><updated>2024-08-31T00:00:00-04:00</updated><author><name>James Walters</name></author><id>tag:james.walters.click,2024-08-31:/weeknotes-831-the-inaugural-one.html</id><summary type="html">&lt;p&gt;Something I've noticed a lot of bloggers doing is a "weeknotes" kind of thing, where they throw together a brief write up of what they've been learning or interacting with over the course of the week. I'm gravitating toward this idea and I want to give it a try. With ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Something I've noticed a lot of bloggers doing is a "weeknotes" kind of thing, where they throw together a brief write up of what they've been learning or interacting with over the course of the week. I'm gravitating toward this idea and I want to give it a try. With family life where it is at this stage, it's just hard to devote the time to sit down and write what feels to me like a large piece. The effect of that is less writing overall. &lt;/p&gt;
&lt;p&gt;But I don't want to let the perfect be the enemy of the good, so I'm going to try to see if I can manage at least a few words, that aren't especially eloquent or organized, about whatever I've been doing lately. Let's give it a shot!&lt;/p&gt;
&lt;h4&gt;Scripture Memory App üìñÔ∏è&lt;/h4&gt;
&lt;p&gt;Something I've been doing lately is working on a scripture memory app. I bought Andrew Davis's recent book &lt;a href="https://www.crossway.org/books/how-to-memorize-scripture-for-life-tpb/"&gt;How to Memorize Scripture for Life&lt;/a&gt;, and became very interested in the simple method he lays out for memorizing massive portions of the Bible.&lt;/p&gt;
&lt;p&gt;One of the things this method requires is keeping a journal of all the verses you're learning, and noting how much you've reviewed each verse. But I don't really like journals, and this just sounds like an arduous bit of work that would eventually turn me off from the whole thing. It also sounds like a bit of work that can be automated rather easily.&lt;/p&gt;
&lt;p&gt;I think ideally you would want a mobile app for this. I'm not a mobile developer though, I'm a web guy. It was my burden to throw together at least a barebones functional web app that I can stand up on my own machine and use. Each day, it tells me which verses I need to review, and which verses I need to learn. Currently, I'm on track to hopefully have Ephesians memorized by the end of the year.&lt;/p&gt;
&lt;p&gt;Through a remarkable turn of God's providence, it turns out a good friend of mine used to be a member of Andrew Davis's church and knows him well. So it wouldn't be impossible for me to get in touch with him and discuss making this an "official app" for the book, if I wanted to.&lt;/p&gt;
&lt;p&gt;I haven't open sourced it yet, only because I might actually try to spin this out into a real app someday. However, I did need to create (yet another? there were a lot of these on PyPI) python library for working with Bible verses, called &lt;a href="https://pypi.org/project/pible/"&gt;pible&lt;/a&gt;. You can look at that if you like. üôÇÔ∏è&lt;/p&gt;
&lt;h4&gt;Birds üê¶Ô∏è&lt;/h4&gt;
&lt;p&gt;I have a friend who's a self-acknowledged bird nerd. He inivited me to go birding with him a few weeks ago. The migration was already starting, and we live in a good spot to see many species passing through.&lt;/p&gt;
&lt;p&gt;It was a lot of fun! I love spending time outdoors in nature, and this just deepened my appreciation of that. Instead of walking out and saying, "Cool! There's a bunch of birds," now I say, "Whoa! Is that an osprey? Let's see if he dives! And what's a pelican doing up here?"&lt;/p&gt;
&lt;p&gt;So, I've purchased a set of binoculars: the &lt;a href="https://vortexoptics.com/vortex-diamondback-hd-8x42-binoculars.html"&gt;Vortex Diamondback HD, 8x42&lt;/a&gt;. This is a great starter set for birding. Vortex offers a great unlimited warranty on all their stuff, so this feels like a great investment.&lt;/p&gt;
&lt;h4&gt;Records üéöÔ∏è&lt;/h4&gt;
&lt;p&gt;These days, vinyl records are my preferred way of experiencing music. I'm an audiophile wanna-be&amp;mdash;I don't have a hi-fi or anything. But I do have a USB turntable, and I have music that I only own on records. So I've had a longstanding item on my project list to rip some records.&lt;/p&gt;
&lt;p&gt;The way I've done this in the past is just recording the turntable with Audacity, trimming silence, and splitting up the tracks. However, Audacity just isn't a great tool for this. I really need to listen to the record as it records&amp;mdash;if the needle skips or something, I need to start recording that entire side over again, and one side of a 12" record is something like 22 minutes. If I have a problem in the first two minutes, I'd love to know so I can immediately restart and not wait 20 minutes to find out. &lt;/p&gt;
&lt;p&gt;But turning on input monitoring so you can hear what you're recording in Audacity causes skips and crashes. It did so some ten years ago when I was first doing this. But today, the Linux kernel is real time, I'm running a Ryzen 7 5700G with 16GB of RAM. There's no excuse for this happening. And I'm not holding out for an improvement anytime soon.&lt;/p&gt;
&lt;p&gt;So, it became clear that I need to pivot to a different piece of software, which is challenging, because Audacity occupies a really nice niche as a prosumer audio tool with the power you need and nothing you don't. Since the tools below it can't do what I need or are poorly designed, I had to move up to a full digital audio workstation: Ardour.&lt;/p&gt;
&lt;p&gt;Ardour is &lt;em&gt;absolutely overkill&lt;/em&gt; for what I'm doing. But, it's battle-tested software that people have used to record and produce albums. If I can get over the learning curve, I know I'll be able to get it to work. And for working through the learning curve, importing some records on a USB stereo input is a nice test case actually.&lt;/p&gt;
&lt;p&gt;Just last night, I was able to work through the lovely &lt;a href="https://prokoudine.github.io/ardour-tutorial/en/"&gt;Ardour tutorial&lt;/a&gt; and get a couple of takes of my 2021 pressing of Gerry Mulligan's Night Lights! Next, I'll need to see about editing down each track to its own file and mastering them. Since I'm just reproducing the recording off the record, it should require basically nothing, but I'll learn the flow.&lt;/p&gt;
&lt;p&gt;And as a musician, the investement I make into this piece of software won't be wasted. I may be able to use Ardour to create something in the future.&lt;/p&gt;
&lt;h4&gt;New Headphones üéßÔ∏è&lt;/h4&gt;
&lt;p&gt;As a remote worker, I've been trying to sort out my setup. If my wife is working, I have a noisy kid around. If she's not, I may still have a noisy kid around. If I leave to go to a coffee shop, I need to get in the zone with some good headphones.&lt;/p&gt;
&lt;p&gt;I tried to solve this a while back with some Raycon Work earbuds, which include active noise cancelling and advertise an 8 hour battery life (times three, with recharging from the battery in the earbuds' case). But after a warranty claim on the first set, the second set still falls far short of that claim: the left earbud lasts maybe 20 minutes, and the right maybe two hours. &lt;/p&gt;
&lt;p&gt;I still use them for listening to audiobooks as I drift off the sleep, they're great for that. But I've had them die on me in the middle of way too many video calls to trust them for work. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Looking at their website as I write this, it looks like Raycon has upgraded all their models, and the "Work" earbuds I have don't seem to be around anymore. So if you buy something new, your mileage may vary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I had a great set of Bose active noise cancelling headphones back in the day, and that was what I was originally shopping for before I ran onto the more affordable Raycons. Bose has their own noise cancelling earbuds, and I imagine they're better than the Raycons, but they only claim a 6 hour battery life. Even if that is correct, that's not going to quite get me through a work day. But come on&amp;mdash;how much can we really expect from a lithium battery small enough to fit in your ear?&lt;/p&gt;
&lt;p&gt;I noticed that Costco had a sale going on the full-sized QuietComfort headphones, and I sprang for them.&lt;/p&gt;
&lt;p&gt;I didn't enjoy the fact that there was no manual or quickstart guide included (though of course there was a booklet containing legal warnings etc. in every conceivable language). I had to google around and find the manual, which I've tucked away. What they really want you to do is use their app to set it up. üôÑÔ∏è&lt;/p&gt;
&lt;p&gt;That aside, these sound great, and my first day with them I went through a spring meeting, no problem. Hopefully these will help me be more flexible about where and how I can work and focus.&lt;/p&gt;
&lt;h4&gt;New Work Laptop On the Way! üôåÔ∏è&lt;/h4&gt;
&lt;p&gt;Lastly, I'll celebrate that a new work laptop is on the way! The unit I have currently is about seven or so years old, runs Windows 10 and has 8GB of memory. It can do what I need it to do, but it sits at capacity doing so. And now that I'm working on our company's Remix app and I'm rebuilding that ~30 times an hour, &lt;em&gt;boy&lt;/em&gt; am I feeling the limits of this machine. It takes anywhere from 45-75 seconds to rebuild. That makes checking trivial changes rather arduous, no?&lt;/p&gt;
&lt;p&gt;Turns out all you need to do to solve this problem is try to demo something you've been working on in a sprint meeting with the head of IT present. He'd started shopping before I was even done presenting. üòÖÔ∏è&lt;/p&gt;
&lt;p&gt;I'm told I'm getting a Dell XPS 15 with 32GB of memory. Quite an upgrade! I've eyed the XPS laptops from the sidelines for a long time, but this will be my first time using one. I'm excited to report back when it finally shows up in about a month or so.&lt;/p&gt;</content><category term="Weeknotes"></category><category term="hardware"></category><category term="Bible"></category><category term="vinyl records"></category></entry><entry><title>PyOhio 2024 Slides &amp; Resources</title><link href="https://james.walters.click/pyohio-2024-slides-resources.html" rel="alternate"></link><published>2024-07-27T00:00:00-04:00</published><updated>2024-07-27T00:00:00-04:00</updated><author><name>James Walters</name></author><id>tag:james.walters.click,2024-07-27:/pyohio-2024-slides-resources.html</id><summary type="html">&lt;p&gt;Man, I love PyOhio! Last year was my first one, and I was so thrilled to hear that this year's event was going to be in person for the first time since COVID. I absolutely wanted to be a part of it, and I'm so glad I got to be ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Man, I love PyOhio! Last year was my first one, and I was so thrilled to hear that this year's event was going to be in person for the first time since COVID. I absolutely wanted to be a part of it, and I'm so glad I got to be! Thanks to &lt;em&gt;you&lt;/em&gt; for listening to my talk! I hope it served you and helped you understand the deployment process for a Python web app a little better.&lt;/p&gt;
&lt;p&gt;Below are links to any resources I mentioned, and a few that I didn't:&lt;/p&gt;
&lt;h3&gt;Links to the Talk&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Link to &lt;a href="https://docs.google.com/presentation/d/1sIJ2NwSQD36IEj10bl1nX0z_Tf6Gfu62Z-vAyqSfKEc/edit?usp=sharing"&gt;my slides on Google Docs&lt;/a&gt;. The presenter notes contain a complete transcript of everything I said.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Static Files&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Django Documentation - &lt;a href="https://docs.djangoproject.com/en/stable/howto/static-files/"&gt;How to manage static files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://whitenoise.readthedocs.io/en/latest/django.html"&gt;Whitenoise with Django Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=E613X3RBegI"&gt;Assets in Django Without Losing Your Hair&lt;/a&gt;, talk by Jacob Kaplan-Moss at PyCon 2019&lt;/li&gt;
&lt;li&gt;RealPython, &lt;a href="https://realpython.com/django-nginx-gunicorn/#serving-static-files-directly-with-nginx"&gt;Serving Static Files Directly with nginx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Database&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Django Documentation - &lt;a href="https://docs.djangoproject.com/en/4.2/ref/databases/"&gt;Databases (API Reference)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Django Documentation - &lt;a href="https://docs.djangoproject.com/en/latest/ref/settings/#databases"&gt;&lt;code&gt;DATABASE&lt;/code&gt; Settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=yTicYJDT1zE"&gt;Use SQLite in production&lt;/a&gt;, talk by Tom Dyson at DjangoCon Europe 2023&lt;/li&gt;
&lt;li&gt;Fly.io, &lt;a href="https://fly.io/blog/sqlite-internals-wal/"&gt;How SQLite Scales Read Concurrency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://datasette.io/"&gt;Datasette&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;WSGI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Django Documentation - &lt;a href="https://docs.djangoproject.com/en/stable/howto/deployment/wsgi/"&gt;How to deploy with WSGI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WqrCnVAkLIo"&gt;WSGI for Web Developers&lt;/a&gt;, talk by Ryan Wilson-Perkin at PyConCA 2018&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Web Servers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Django Documentation - &lt;a href="https://docs.djangoproject.com/en/stable/howto/deployment/wsgi/modwsgi/"&gt;How to use Django with Apache and mod_wsgi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RealPython, &lt;a href="https://realpython.com/django-nginx-gunicorn/"&gt;Securely Deploy a Django App With Gunicorn, Nginx, &amp;amp; HTTPS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Deployment Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Django Documentation - &lt;a href="https://docs.djangoproject.com/en/stable/howto/deployment/checklist/"&gt;Deployment Checklist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://django-simple-deploy.readthedocs.io/en/latest/"&gt;django-simple-deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lincolnloop/django-production"&gt;django-production&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Docker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learndjango.com/tutorials/django-docker-and-postgresql-tutorial"&gt;Django, Docker and Postgres Tutorial - LearnDjango.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Additional Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Here's the &lt;a href="https://james.walters.click/what-django-deployment-is-really-about.html"&gt;blog post&lt;/a&gt; from which this talk was adapted.&lt;/li&gt;
&lt;li&gt;Here's the &lt;a href="https://wagtail.org/blog/2023-wagtail-deployment-survey/"&gt;2023 Wagtail Developer Survey&lt;/a&gt; I mentioned&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vsupalov.com/django-systemd-crashcourse/"&gt;Django Systemd Crashcourse&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;footer id="footer" style="font-weight: bold; text-align: center;"&gt;
Found this helpful or informative? &lt;a href="https://ko-fi.com/iamjameswalters"&gt;Buy me a coffee!&lt;/a&gt; ‚òïÔ∏è
&lt;/footer&gt;
&lt;script&gt;
    let now = new Date; 
    let month_after = new Date('2024-8-27'); 
    if (now &lt; month_after) {
      document.getElementById('footer').style.display = 'none';
    }
&lt;/script&gt;</content><category term="Python"></category><category term="Django"></category><category term="deployment"></category><category term="PyOhio"></category><category term="portfolio"></category></entry><entry><title>Robots Aren't Responsible</title><link href="https://james.walters.click/robots-arent-responsible.html" rel="alternate"></link><published>2024-02-08T00:00:00-05:00</published><updated>2024-02-08T00:00:00-05:00</updated><author><name>James Walters</name></author><id>tag:james.walters.click,2024-02-08:/robots-arent-responsible.html</id><summary type="html">&lt;p&gt;DHH posted a recent piece called &lt;a href="https://world.hey.com/dhh/it-s-easier-to-forgive-a-human-than-a-robot-d4a97b3a"&gt;It's easier to forgive a human than a robot&lt;/a&gt;. In it, he highlights a fascinating problem and draws a handful of conclusions that I think head off in the wrong directions.&lt;/p&gt;
&lt;p&gt;The problem he highlights is that as AI and similar systems take over ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;DHH posted a recent piece called &lt;a href="https://world.hey.com/dhh/it-s-easier-to-forgive-a-human-than-a-robot-d4a97b3a"&gt;It's easier to forgive a human than a robot&lt;/a&gt;. In it, he highlights a fascinating problem and draws a handful of conclusions that I think head off in the wrong directions.&lt;/p&gt;
&lt;p&gt;The problem he highlights is that as AI and similar systems take over more dangerous tasks, the responsibility for mistakes shifts from humans to the systems. His main example is driving. As Tesla introduces better self-driving technology in more vehicles, DHH posits a scenario where the 40,000+ deaths due to auto accidents in the US are halved because of self-driving cars, but that leaves Tesla on the hook for 10,000 deaths. To quote him:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Because let‚Äôs just say you‚Äôre Tesla. And suddenly half of everyone in America is being driven by one of your robo-cars. Your self-driving tech is highly advanced. 50% better than humans! That leaves you responsible for 10,000 deaths per year. Eeks! Okay, let‚Äôs say you‚Äôre another order of magnitude better, that‚Äôs still 1,000 deaths. Two orders? 100 deaths. Per year.&lt;/p&gt;
&lt;p&gt;The math is easy, the human element is hard, and the legal ramifications perhaps impossible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He goes on to muse about the psychological palatability of impersonal computer systems bearing blame for the deaths of thousands of people, and suggests that "maybe this is just a phase," that we'll develop mental categories for forgiving machines.&lt;/p&gt;
&lt;p&gt;I think David accidentally gives away the real nature of the problem. In his example, he doesn't say, "that leaves the self-driving system responsible for 10,000 deaths per year," he says, "that leaves &lt;em&gt;you&lt;/em&gt; responsible." We wouldn't hold the computer, the self-driving car, responsible for mistake. We would hold Tesla responsible.&lt;/p&gt;
&lt;h2&gt;The Nature of Blame&lt;/h2&gt;
&lt;p&gt;This is one of those instances where despite the heaps of fog and shadow that are cast over an intellectual problem, we know the real answer within our own skin, as a gut instinct. The machine is not responsible because the machine &lt;em&gt;cannot&lt;/em&gt; be responsible.&lt;/p&gt;
&lt;p&gt;With issues like killing people with cars, or medical malpractice by AI doctors, or &lt;a href="https://simonwillison.net/2023/Apr/7/chatgpt-lies/"&gt;large language models lying&lt;/a&gt;, these are not issues that are morally neutral. When people die, when the truth is distorted, these are moral issues. And moral issues demand moral blame. Moral blame requires volition. Machines are incapable of volition&amp;mdash;only their makers are.&lt;/p&gt;
&lt;p&gt;To suggest that systems designed by human beings are released from the chain of moral causation and are transmuted into brute, mechanistic forces of chance such as those in the realm of nature is, at least, a controversial claim to make. I am not persuaded that the echos of human intentionality and accountability are washed away so soon after the Teslas leave the factory.&lt;/p&gt;
&lt;h2&gt;It's still the Chinese Room Argument&lt;/h2&gt;
&lt;p&gt;Conversations like this&amp;mdash;and there are many of them these days&amp;mdash;are encumbered by playing fast and loose with terms like "artificial intelligence." The truth is that we're training computers to be pretty decent at extremely specific tasks. AI systems have no real cognition, no model of consciousness. No volition, no will; just a program that is, ultimately, trained to guess the most likely response to a given prompt, even if that prompt is really complex compared to anything that's been possible before.&lt;/p&gt;
&lt;p&gt;It's still the &lt;a href="https://en.wikipedia.org/wiki/Chinese_room"&gt;chinese room argument&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What's complicated about all of this, of course, is that whereas traditionally you could draw a one-to-one relationship between the will of the programmer and output of the program, this is no longer possible as we enter the world of AI systems whose inner machinations are too complex for us to fully understand, and behave in ways that may be predictable but not wholly deterministic. This is simply the nature of these systems. &lt;/p&gt;
&lt;p&gt;We're going to have to decide how much consistency we're going to demand from indeterminate systems like AI models before we hold the companies who develop them accountable. &lt;/p&gt;</content><category term="Meta"></category><category term="Artificial intelligence"></category><category term="ethics"></category></entry><entry><title>PyOhio 2023 Slides &amp; Resources</title><link href="https://james.walters.click/pyohio-2023-slides-resources.html" rel="alternate"></link><published>2023-12-16T00:00:00-05:00</published><updated>2023-12-16T00:00:00-05:00</updated><author><name>James Walters</name></author><id>tag:james.walters.click,2023-12-16:/pyohio-2023-slides-resources.html</id><summary type="html">&lt;p&gt;On the heels of DjangoCon (sorry, a restrospective is overdue for that one, it's coming, I promise), I went and signed up for another conference&amp;mdash;&lt;a href="http://pyohio.org/"&gt;PyOhio!&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;I decided to throw my hat in the ring with a talk on web scraping. It's a fun skill that I've put to use ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;On the heels of DjangoCon (sorry, a restrospective is overdue for that one, it's coming, I promise), I went and signed up for another conference&amp;mdash;&lt;a href="http://pyohio.org/"&gt;PyOhio!&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;I decided to throw my hat in the ring with a talk on web scraping. It's a fun skill that I've put to use in a few different situations so far. Getting this down to 15 minutes was &lt;strong&gt;hard!&lt;/strong&gt; My first talk was in person at a conference, but this conference was online, which was a different experience. It was harder putting together a video I think (I'm used to public speaking), but it made for a stress-free conference day!&lt;/p&gt;
&lt;p&gt;If you're reading this, I hope that means you enjoyed the talk and came here for some pointers to some related resources. Here they are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pyohio.org/2023/talks/web-scraping-crash-course-with-python-and-scrapy/"&gt;My talk page on PyOhio.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/iamjameswalters/library-eventextractor"&gt;Github repository&lt;/a&gt; for the demo code I wrote in the talk&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1kzZ2Jppvm9gudBCYFTHiEAamP6qjdnC17ONPA6FR0WI/edit?usp=sharing"&gt;My slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;My &lt;a href="https://james.walters.click/the-road-less-traveled-understanding-xpaths.html"&gt;post on XPaths&lt;/a&gt; that explains how these work&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.scrapy.org/en/latest/"&gt;Scrapy's documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/"&gt;BeautifulSoup&lt;/a&gt;, an HTML parsing library. Handy if you're dealing with ugly, malformed markup. I'm honestly more accustomed to BeautifulSoup's API and would probably reach for it instead of using the Scrapy's built-in selectors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll also include a few things that I had to cut from my talk due to time constraints.&lt;/p&gt;
&lt;h3&gt;Is Web Scraping Legal?&lt;/h3&gt;
&lt;p&gt;The answer to this is that, while there are some limitations, yes, web scraping is legal. Here are a couple of articles that get into the concerns in more detail, but yes, as long as your respecting others‚Äô copyright, and you‚Äôre scraping publicly available data, there‚Äôs nothing illegal about that. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.termsfeed.com/blog/web-scraping-laws/"&gt;TermsFeed - Web Scraping Laws&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.eff.org/deeplinks/2019/09/victory-ruling-hiq-v-linkedin-protects-scraping-public-data"&gt;Electronic Frontier Foundation - Victory! Ruling in hiQ v. Linkedin Protects Scraping of Public Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Scrape Politely üòÅÔ∏è&lt;/h3&gt;
&lt;p&gt;It‚Äôs worth mentioning though that there are some points of etiquette to consider.&lt;/p&gt;
&lt;h4&gt;1. Robots.txt&lt;/h4&gt;
&lt;p&gt;The first rule of etiquette when web scraping is respect a website‚Äôs robots.txt. Robots.txt is a file that tells web crawlers like search engines and your scraper what kinds of things they should look at and what they should not. It‚Äôs always a good idea to follow a site‚Äôs robots.txt.&lt;/p&gt;
&lt;h4&gt;2. Terms of Use&lt;/h4&gt;
&lt;p&gt;The second rule is to respect a site‚Äôs Terms of Use. Even if you‚Äôre accessing publicly available data which is legal to do, you may be accessing data in a way that violates a site‚Äôs Terms of Use. In these cases, you may not have any legal liability, but you may get banned from the site.&lt;/p&gt;
&lt;h4&gt;3. Wait a bit between requests&lt;/h4&gt;
&lt;p&gt;And finally, a third rule of thumb to follow is, if you‚Äôre scraping several URLs on the same site, space those requests out a bit and add some wait time in between. If you‚Äôre hitting a site with a bunch of requests out of nowhere, that‚Äôs something that a lot of sites are going to interpret as the beginning of a denial of service attack rather than legitimate use, and you might get autobanned for a bit. So don‚Äôt overload a site‚Äôs resources or come at them by surprise: set up your scraper to wait a bit in these cases.&lt;/p&gt;
&lt;h3&gt;Where Do I Run My Scraper?&lt;/h3&gt;
&lt;p&gt;So now that you‚Äôve written a web scraper, where should you run it? It‚Äôs easy to run scrapers on a one-off basis like we did in the talk, and if that‚Äôs all you need to do then this isn‚Äôt a problem for you. But you probably want to do some routine capturing of data, what‚Äôs the best way to do that? &lt;/p&gt;
&lt;p&gt;The easiest way is to schedule it as a scripted job on your own computer. In Linux you can do this with a cron job, on Windows there‚Äôs the Scheduled Tasks system. I have a scraper that runs on my work laptop every morning to gather up some non-critical data I keep an eye on for my job.&lt;/p&gt;
&lt;p&gt;Another option, if you want something going twenty-four hours a day, is to deploy something on a cloud box. Or, a great variation on this is to stand it up on a Raspberry Pi. I have plans to set up a web scraper on a &lt;a href="https://rpilocator.com/?cat=PIZERO%2CPIZERO2"&gt;Raspberry Pi Zero&lt;/a&gt;, it‚Äôs a tiny $15 computer that uses around one or two watts of power. It‚Äôs a great little tool to run a web scraper on.&lt;/p&gt;
&lt;h3&gt;What Should I Scrape For?&lt;/h3&gt;
&lt;p&gt;Now that you know how to scrape the web, what should you scrape for? There are lots of great ideas out there, you can google for them all day long, but a great place to start is your next job. It‚Äôs really easy to scrape job sites using these tools and you can have something always looking for that next big career opportunity for you. Searching for jobs is one of the most laborious parts of your career search, so why not automate that chore? Let the jobs come to you.&lt;/p&gt;
&lt;p&gt;This applies to your next house or car as well, you can scrape real estate listings, apartment sites, and car dealerships for find your next dream car or dream home.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I hope this has been informative and helpful. Web scraping is one of those programming things that I would have thought was beyond my reach, but actually it's quite doable, and it comes in handy even more often than you think. Happy scraping!&lt;/p&gt;
&lt;footer style="font-weight: bold; text-align: center;"&gt;
Found this talk useful or insightful? &lt;a href="https://ko-fi.com/iamjameswalters"&gt;Buy me a coffee!&lt;/a&gt; ‚òïÔ∏è
&lt;/footer&gt;</content><category term="Python"></category><category term="Scrapy"></category><category term="web scraping"></category><category term="PyOhio"></category><category term="portfolio"></category></entry><entry><title>DjangoCon 2023 Slides &amp; Resources</title><link href="https://james.walters.click/djangocon-2023-slides-resources.html" rel="alternate"></link><published>2023-10-17T00:00:00-04:00</published><updated>2023-10-17T00:00:00-04:00</updated><author><name>James Walters</name></author><id>tag:james.walters.click,2023-10-17:/djangocon-2023-slides-resources.html</id><summary type="html">&lt;p&gt;It's such a delight to give a talk at this year's DjangoCon! This is my first tech conference, as well as my first time presenting. I'd love to thank &lt;a href="https://fosstodon.org/@wsvincent"&gt;Will Vincent&lt;/a&gt;, &lt;a href="https://fosstodon.org/@ehmatthes"&gt;Eric Matthes&lt;/a&gt;, and &lt;a href="https://twitter.com/AlyssaNicoll"&gt;Alyssa Nicholl&lt;/a&gt; for all their help reviewing and refining this talk to be the best it ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's such a delight to give a talk at this year's DjangoCon! This is my first tech conference, as well as my first time presenting. I'd love to thank &lt;a href="https://fosstodon.org/@wsvincent"&gt;Will Vincent&lt;/a&gt;, &lt;a href="https://fosstodon.org/@ehmatthes"&gt;Eric Matthes&lt;/a&gt;, and &lt;a href="https://twitter.com/AlyssaNicoll"&gt;Alyssa Nicholl&lt;/a&gt; for all their help reviewing and refining this talk to be the best it could be. I also want to thank my good friend and colleague &lt;a href="https://fosstodon.org/@CrashBandit1990"&gt;Sam Crabtree&lt;/a&gt;, without whose influence I wouldn't have learned Python and Django in the first place. üíöÔ∏è After the conference is over, I'll take some time to reflect on everything and post about it here, so keep an eye üëÄÔ∏è out for that! &lt;/p&gt;
&lt;p&gt;In the meantime, below are links to any resources I mentioned:&lt;/p&gt;
&lt;h3&gt;Links to the Talk&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Link to &lt;a href="https://docs.google.com/presentation/d/1sIJ2NwSQD36IEj10bl1nX0z_Tf6Gfu62Z-vAyqSfKEc/edit?usp=sharing"&gt;my slides on Google Docs&lt;/a&gt;. The presenter notes contain a complete transcript of everything I said.&lt;/li&gt;
&lt;li&gt;Here's the &lt;a href="https://youtu.be/t-wsiW5mkgA"&gt;video of the talk&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Static Files&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Django Documentation - &lt;a href="https://docs.djangoproject.com/en/stable/howto/static-files/"&gt;How to manage static files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://whitenoise.readthedocs.io/en/latest/django.html"&gt;Whitenoise with Django Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=E613X3RBegI"&gt;Assets in Django Without Losing Your Hair&lt;/a&gt;, talk by Jacob Kaplan-Moss at PyCon 2019&lt;/li&gt;
&lt;li&gt;RealPython, &lt;a href="https://realpython.com/django-nginx-gunicorn/#serving-static-files-directly-with-nginx"&gt;Serving Static Files Directly with nginx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Database&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Django Documentation - &lt;a href="https://docs.djangoproject.com/en/4.2/ref/databases/"&gt;Databases (API Reference)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Django Documentation - &lt;a href="https://docs.djangoproject.com/en/latest/ref/settings/#databases"&gt;&lt;code&gt;DATABASE&lt;/code&gt; Settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fly.io, &lt;a href="https://fly.io/blog/sqlite-internals-wal/"&gt;How SQLite Scales Read Concurrency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://datasette.io/"&gt;Datasette&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;WSGI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Django Documentation - &lt;a href="https://docs.djangoproject.com/en/stable/howto/deployment/wsgi/"&gt;How to deploy with WSGI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WqrCnVAkLIo"&gt;WSGI for Web Developers&lt;/a&gt;, talk by Ryan Wilson-Perkin at PyConCA 2018&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Web Servers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Django Documentation - &lt;a href="https://docs.djangoproject.com/en/stable/howto/deployment/wsgi/modwsgi/"&gt;How to use Django with Apache and mod_wsgi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RealPython, &lt;a href="https://realpython.com/django-nginx-gunicorn/"&gt;Securely Deploy a Django App With Gunicorn, Nginx, &amp;amp; HTTPS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Deployment Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Django Documentation - &lt;a href="https://docs.djangoproject.com/en/stable/howto/deployment/checklist/"&gt;Deployment Checklist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://django-simple-deploy.readthedocs.io/en/latest/"&gt;django-simple-deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lincolnloop/django-production"&gt;django-production&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Additional Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Here's the &lt;a href="https://james.walters.click/what-django-deployment-is-really-about.html"&gt;blog post&lt;/a&gt; from which this talk was adapted.&lt;/li&gt;
&lt;li&gt;Here's the &lt;a href="https://wagtail.org/blog/2023-wagtail-deployment-survey/"&gt;2023 Wagtail Developer Survey&lt;/a&gt; I mentioned&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vsupalov.com/django-systemd-crashcourse/"&gt;Django Systemd Crashcourse&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;footer id="footer" style="font-weight: bold; text-align: center;"&gt;
Found this helpful or informative? &lt;a href="https://ko-fi.com/iamjameswalters"&gt;Buy me a coffee!&lt;/a&gt; ‚òïÔ∏è
&lt;/footer&gt;
&lt;script&gt;
    let now = new Date; 
    let oct31 = new Date('2023-10-31'); 
    if (now &lt; oct31) {
      document.getElementById('footer').style.display = 'none';
    }
&lt;/script&gt;</content><category term="Python"></category><category term="Django"></category><category term="deployment"></category><category term="DjangoCon"></category><category term="portfolio"></category></entry><entry><title>Solving Verticals</title><link href="https://james.walters.click/solving-verticals.html" rel="alternate"></link><published>2023-09-08T00:00:00-04:00</published><updated>2023-09-08T00:00:00-04:00</updated><author><name>James Walters</name></author><id>tag:james.walters.click,2023-09-08:/solving-verticals.html</id><summary type="html">&lt;p&gt;A little while back, I did some freelancing with a couple of friends for a real estate investment firm. One of my friends knows these guys. They have a great business, but the place where they were falling down was keeping investors in the loop on how things were developing ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;A little while back, I did some freelancing with a couple of friends for a real estate investment firm. One of my friends knows these guys. They have a great business, but the place where they were falling down was keeping investors in the loop on how things were developing with their properties. One of the big fish asked for a web portal where he could log in and look at his investments and see at a glance how they were doing. That's where we came in.&lt;/p&gt;
&lt;p&gt;Being Python/Django guys, we decided to develop the thing in Django. We just used Bootstrap for the frontend, the clients weren't picky. Bootstrap is something we all already had experience with. I know it gets kind of a bad rap because it's been overused, but there's a reason it was overused: it's refreshing to be able to work with a CSS framework that's light on JS. You can move a lot quicker.&lt;/p&gt;
&lt;p&gt;Here's what the investor dashboard looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Investor Dashboard" src="images/integrity_dashboard.png"&gt;&lt;/p&gt;
&lt;p&gt;One of my teammates has always had a great eye for UI and design. I like the look of the grid of cards! It wouldn't have occurred to me. The other more data-oriented teammate accommodated an investor request by adding the ability to export everything about his investments as a CSV. He just wanted something he could throw over to his accountant.&lt;/p&gt;
&lt;p&gt;If you look at the property, you'll get the details about it at a glance, as well as any status updates that have been posted about it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Property Page" src="images/integrity_property.png"&gt;&lt;/p&gt;
&lt;p&gt;Most of my job involved setting up user accounts, which we handled through &lt;a href="https://github.com/jazzband/django-invitations"&gt;django-invitations&lt;/a&gt;. Fanastic library that makes it trivial to email people and have them set up an account! Here's the screen I made to manage invitations at a glance:&lt;/p&gt;
&lt;p&gt;&lt;img alt="User Invitations" src="images/integrity_invitations.png"&gt;&lt;/p&gt;
&lt;p&gt;Fundamentally though, this was really just a basic CRUD app with three main models: users, properties, and investments by users in properties. You can see here how the site management page offers you access to all of them:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Managing the Site" src="images/integrity_categories.png"&gt;&lt;/p&gt;
&lt;p&gt;It's a pretty simple site, but it provided the client with something they really needed: a single place to keep everything relevant to their customers that offers them a view into how things were progressing.&lt;/p&gt;
&lt;p&gt;And that's what I want to talk about today.&lt;/p&gt;
&lt;h2&gt;Solving Verticals ‚¨ÜÔ∏è&lt;/h2&gt;
&lt;p&gt;I'm pretty sure I first heard &lt;a href="http://wsvincent.com/"&gt;Will Vincent&lt;/a&gt; talk about this on Django Chat one time, so he gets the hat tip. üé©Ô∏è&lt;/p&gt;
&lt;p&gt;Most businesses really do run on emails and Excel spreadsheets and loose PDFs and that stack of papers on Janice's desk that she's supposed to deliver across town by 3:15 pm. Those of us who write software for a living&amp;mdash;or even just know what software solutions for these sorts of things exist out in the wild&amp;mdash;might be appalled, but yes, they really work this way. It's bonkers.&lt;/p&gt;
&lt;p&gt;It really doesn't take much to provide a single, integrated solution that handles everything about a business's workflow from top to bottom. It just involves accommodating the custom abstractions that comprise the building blocks of some particular industry's workflow. For this project, it was investments and properties. For doctors, it might be patients or visits or medical incidents. For lawyers, it might be cases. None of that is rocket science, but if their abstractions are baked into the cake, that's a world of improvement to them over having to figure out how to map their abstractions onto someone else's abstractions in some project management suite.&lt;/p&gt;
&lt;p&gt;There are tons of these verticals out there that can be solved with what amounts to minimal effort for the savvy software developer. A lot of these businesses don't have developers on staff (because they don't need them), but they also aren't looking to contract out something like this because they don't realize just how much better an integrated solution can be over the existing "CC: me on that email and forward that attachment" status quo.&lt;/p&gt;
&lt;p&gt;Django Developers are &lt;a href="https://lp.jetbrains.com/django-developer-survey-2022/"&gt;twice as likely to freelance&lt;/a&gt; over other developers generally. That's because Django's batteries are included. Most of the work you need to do on a freelance project has already been done. This story demonstrates that, yeah, it really doesn't take that much to introduce a software tool that provides a lot of value. There are simply too many businesses and industries that have never had anyone actually build it for them.&lt;/p&gt;
&lt;p&gt;If you're looking for ideas for a side gig, I'd recommend thinking in this direction for starters.&lt;/p&gt;
&lt;footer style="font-weight: bold; text-align: center;"&gt;
Found this helpful? &lt;a href="https://ko-fi.com/iamjameswalters"&gt;Buy me a coffee!&lt;/a&gt; ‚òïÔ∏è
&lt;/footer&gt;</content><category term="Meta"></category><category term="Freelance"></category><category term="Show and Tell"></category><category term="portfolio"></category></entry><entry><title>Do You Like Your Software?</title><link href="https://james.walters.click/do-you-like-your-software.html" rel="alternate"></link><published>2023-08-18T00:00:00-04:00</published><updated>2023-08-18T00:00:00-04:00</updated><author><name>James Walters</name></author><id>tag:james.walters.click,2023-08-18:/do-you-like-your-software.html</id><summary type="html">&lt;p&gt;People have a strange relationship with their software. Some applications are mainstays in our workplaces, but don't impact our lives off the clock. Some applications seemingly exist solely to annoy us. Many of us spend hours and hours with software designed to amuse us. Some of us wouldn't know how ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;People have a strange relationship with their software. Some applications are mainstays in our workplaces, but don't impact our lives off the clock. Some applications seemingly exist solely to annoy us. Many of us spend hours and hours with software designed to amuse us. Some of us wouldn't know how to live our lives without certain pieces of software. And it's increasingly ubiquitous--software drives our cars, controls our light bulbs, tells us how to get where we're going.&lt;/p&gt;
&lt;p&gt;All of which brings up an interesting question to me...&lt;/p&gt;
&lt;h2&gt;Do you like your software?&lt;/h2&gt;
&lt;p&gt;It's not at all an obvious question. Many of us use software that we decidely do &lt;em&gt;not&lt;/em&gt; like. Do you care for your banking app? How about your tax program? Does your email client ‚ú®Ô∏è spark joy? ‚ú®Ô∏è&lt;/p&gt;
&lt;p&gt;My phone, for instance, is almost entirely devoid of any software that I like. I find phones to be incredibly infuriating computing devices. Web browsers on phones are hamstrung. Messaging apps are consternating on account of the sheer number of them you have to have installed in order to talk to anybody. My location app nags me &lt;em&gt;every. single. time.&lt;/em&gt; that I open it, because I have battery optimization on. Sorry, I don't want you to destroy my battery life in order to find out where I am every second of the day when for the vast majority of the time I'm at my desk. Fast food apps break all the time, because someone thought it was a good idea for fast food companies to make software. And most apps I have installed like to spam me with ads every other day, so I have a constant stream of unwanted marketing getting pumped into my pocket.&lt;/p&gt;
&lt;p&gt;Part of the problem is that we use a lot of software we didn't ask for. No one who uses a 2FA app went scrolling through their app store and said, "Whoa, two factor authentication! I can't wait to get that set up!" You were told by your IT department, or a service that you use, that you have to install one or you won't be able to get on with things. (and yes, 2FA is a good thing, but you probably didn't choose to use it, did you?) &lt;/p&gt;
&lt;p&gt;I absolutely never asked for an infotainment system in any car I've ever had, whether it's Apple Car Play or Android Auto, or whatever the auto maker's homegrown thing is. I was happy with my CD player, and these days, I'll just take the 1/8" AUX jack.&lt;/p&gt;
&lt;p&gt;Everyday when I log onto my work computer, I have to sign into the VPN client. There's a bit of software I never asked to use. And I &lt;em&gt;certainly&lt;/em&gt; didn't ask to use Microsoft Teams.&lt;/p&gt;
&lt;p&gt;But there is software that I &lt;em&gt;like!&lt;/em&gt; I like Ubuntu MATE, my desktop PC's operating system. In fact, you could even call it &lt;em&gt;delight&lt;/em&gt; when I see those three menus&amp;mdash;Applications, Places, and System&amp;mdash;at the top of my screen. I like Visual Studio Code, and I like VSCodium even better. I generally enjoy using GitHub. Is that because I'm usually achieving something when I am? ü§îÔ∏è&lt;/p&gt;
&lt;p&gt;I like AntennaPod, a podcast app I found on FDroid. It lets me trim off the intro and outro music of podcasts, which wake me up when I'm trying to listen and fall asleep. I like RetroPie, it's a really nice bundle of software for playing all my old videogames (which, yes, I ripped off my catridges myself, but that's a story for another time). I like Nextcloud, it's a much nicer alternative to Google Drive that I felt comfortable using to share photos.&lt;/p&gt;
&lt;h2&gt;Do you pay for your software?&lt;/h2&gt;
&lt;p&gt;An interesting observation that I make time and time again is that the apps that actually run my life, the ones that I couldn't do without and are most valuable to me, are ones that I pay for. &lt;/p&gt;
&lt;p&gt;A lot of software is available on some sort of freemium model, where it's ad-supported (YouTube) or you pay for it with your data (GMail). Those of us who love open source software often use it for free, without contributing back to the project. So it's interesting to me to consider that, where it counts, the wallet comes out. Things like my budget software simply have to work, and they have to work well.&lt;/p&gt;
&lt;p&gt;I recently got an email from &lt;a href="http://sourcery.ai/"&gt;Sourcery.ai&lt;/a&gt;. They make an extension for VS Code that inspects my Python code and suggests refactorings and ways to write it better. I had started using it for free, but they're phasing out the free access and transitioning to a paid model only. As an existing user, they offered me the chance to buy a lifetime license. And you know what? I did.&lt;/p&gt;
&lt;p&gt;Because I &lt;em&gt;like&lt;/em&gt; Sourcery. It's helped me be a better programmer. Its feedback on the quality of functions helped me with a whole codebase at my job on a CLI tool I wrote. AI code assistants are about to be everywhere, and large language models like ChatGPT loom large in this space. Why pay for this then when free AI models exist and will only continue to proliferate? Because I &lt;em&gt;like&lt;/em&gt; Sourcery, so I'm willing to pay for it.&lt;/p&gt;
&lt;h2&gt;Should we use software that we don't like?&lt;/h2&gt;
&lt;p&gt;I don't really have a point here. This is sort of an existential odyssey of thought. But that's kind of what bothers me, is how little we think about the software we use, and whether or not we &lt;em&gt;like&lt;/em&gt; it. Shouldn't we be building tools and pieces of software that we enjoy to use?&lt;/p&gt;
&lt;p&gt;It's a bit of a loaded question&amp;mdash;there's always going to be that software that we don't ask for, the ATM interface or the gas pump screen or the self checkout station, et cetera. But in our products, at our jobs, and certainly in our leisure time, shouldn't we lobby for the software we like to use? That makes us more productive or effective? Perhaps even promotes human flourishing?&lt;/p&gt;
&lt;footer style="font-weight: bold; text-align: center;"&gt;
Found this interesting? &lt;a href="https://ko-fi.com/iamjameswalters"&gt;Buy me a coffee!&lt;/a&gt; ‚òïÔ∏è
&lt;/footer&gt;</content><category term="Meta"></category></entry><entry><title>Insecurely Copying Text in Javascript</title><link href="https://james.walters.click/insecurely-copying-text-in-javascript.html" rel="alternate"></link><published>2023-04-11T00:00:00-04:00</published><updated>2023-04-11T00:00:00-04:00</updated><author><name>James Walters</name></author><id>tag:james.walters.click,2023-04-11:/insecurely-copying-text-in-javascript.html</id><summary type="html">&lt;p&gt;I've been working on an internal web app at my job for our call and chat agents. There's some text provided there that agents commonly need to copy and paste. I thought it might be nice to write a bit of scripting to automatically copy these bits of text to ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been working on an internal web app at my job for our call and chat agents. There's some text provided there that agents commonly need to copy and paste. I thought it might be nice to write a bit of scripting to automatically copy these bits of text to the clipboard when the text is selected, without having to Ctrl-C.&lt;/p&gt;
&lt;p&gt;After perusing the web, the obvious answer seemed to be to use JavaScript's &lt;a href="https://devdocs.io/dom/clipboard"&gt;clipboard API&lt;/a&gt;. In order to copy text, you would just write something like: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text I want to copy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And indeed, this will work in something like 90% of your usecases. I ran into an edge case though.&lt;/p&gt;
&lt;h2&gt;Let Me Stop You Right There üõëÔ∏è&lt;/h2&gt;
&lt;p&gt;You see, the use of the clipboard API requires a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts"&gt;secure context&lt;/a&gt;. What exactly does that mean? It's probably a bit more nuanced than this, but &lt;em&gt;basically&lt;/em&gt; it means you need to be connecting over HTTPS.&lt;/p&gt;
&lt;p&gt;Remember how I mentioned this was an &lt;strong&gt;internal&lt;/strong&gt; web app? We access it unencrypted. That means the clipboard API won't work. üò©Ô∏è&lt;/p&gt;
&lt;p&gt;Is there any other way?&lt;/p&gt;
&lt;h2&gt;I'll Copy Whatever I Darn Well Please&lt;/h2&gt;
&lt;p&gt;It turns out there kind of is.&lt;/p&gt;
&lt;p&gt;This &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard#using_execcommand"&gt;MDN article&lt;/a&gt; is a great resource on this topic. There's a deprecated API called &lt;code&gt;document.execCommand()&lt;/code&gt; that allows you to do all kinds of things, one of which is &lt;code&gt;copy&lt;/code&gt;. But if it's deprecated, how can we use it?&lt;/p&gt;
&lt;p&gt;The key is in this condition (emphasis mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These commands can be used without any special permission in &lt;strong&gt;short-lived event handlers&lt;/strong&gt; for a user action (&lt;strong&gt;for example, a click handler&lt;/strong&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That's exactly our usecase. I'm assuming this API wouldn't work if you had it as part of a script. But as part of an &lt;code&gt;onclick&lt;/code&gt; handler, the browser will execute it.&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;document.execCommand('copy')&lt;/code&gt; will copy whatever the currently selected text is to the clipboard, so you have to manually query for the element you need, call its &lt;code&gt;.select()&lt;/code&gt; method to have the cursor select its text, and then call &lt;code&gt;document.execCommand('copy')&lt;/code&gt;, which is a little cumbersome. In my case, I've got some CSS applied to a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; such that whenever you click anywhere inside it, all of its text gets selected. That just leaves the copy logic. My code looks something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cm"&gt;&amp;lt;!-- span containing text to copy --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; 
  &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;user-select: all;&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;document.execCommand(&amp;#39;copy&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  Copy this text
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It's possible you could encounter a race condition where the command gets executed before the CSS, but that's never happened in any of my testing. Anyway, the solution would be to add a 50ms pause or something barely noticeable like that before running the command to give the CSS time to be processed.&lt;/p&gt;
&lt;p&gt;Try it yourself! &lt;/p&gt;
&lt;div style="text-align: center;margin: 30px 0;"&gt;
&lt;span style="user-select: all;" onclick="document.execCommand('copy')"&gt;
  Copy this text
&lt;/span&gt;
&lt;/div&gt;

&lt;p&gt;Did it work for you?&lt;/p&gt;
&lt;p&gt;Anyway, that's how you can copy-and-paste something in JavaScript if you can't use &lt;code&gt;navigator.clipboard&lt;/code&gt; for whatever reason, like serving from an "insecure context". I suspect serving web pages over unencrypted connections is still common enough for things like internal intranet sites that someone might need to know about this.&lt;/p&gt;
&lt;footer style="font-weight: bold; text-align: center;"&gt;
Found this helpful? &lt;a href="https://ko-fi.com/iamjameswalters"&gt;Buy me a coffee!&lt;/a&gt; ‚òïÔ∏è
&lt;/footer&gt;</content><category term="Web"></category><category term="JavaScript"></category></entry><entry><title>What Django Deployment is Really About</title><link href="https://james.walters.click/what-django-deployment-is-really-about.html" rel="alternate"></link><published>2023-01-29T00:00:00-05:00</published><updated>2023-01-29T00:00:00-05:00</updated><author><name>James Walters</name></author><id>tag:james.walters.click,2023-01-29:/what-django-deployment-is-really-about.html</id><summary type="html">&lt;p&gt;Django has this reputation for being hard to deploy. I don't think that's really true.&lt;/p&gt;
&lt;p&gt;I think that people haven't taken the time to explain to beginners the concepts you're thinking about when it comes to deployment. We focus so much on teaching people how to build apps in Django ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Django has this reputation for being hard to deploy. I don't think that's really true.&lt;/p&gt;
&lt;p&gt;I think that people haven't taken the time to explain to beginners the concepts you're thinking about when it comes to deployment. We focus so much on teaching people how to build apps in Django that deployment feels like an afterthought. People are good at making a list of steps, and saying, "Well, here's how &lt;em&gt;I&lt;/em&gt; do it." But if that solution isn't suitable because it uses a provider that won't work for you, or because the steps that worked yesterday don't work today, or for one of any number of reasons, then our beginner is stuck without any way to move forward.&lt;/p&gt;
&lt;p&gt;I think if we just took the time to explain what the fundamental things are that you're trying to achieve in deployment, it would help beginners get their feet planted and be able to start figuring out each piece of the process, and what works for them in each part.&lt;/p&gt;
&lt;p&gt;If you're here looking for deployment steps, you're at the wrong place. But if you'd like to get the lay of the land, an overview of what deployment's really about, then I hope this helps.&lt;/p&gt;
&lt;h2&gt;The Penguin in the Room üêßÔ∏è&lt;/h2&gt;
&lt;p&gt;Despite the fact that I'm a &lt;a href="https://james.walters.click/tag/linux-grandpa.html"&gt;Linux Grandpa&lt;/a&gt;, I'm not here to talk about Linux today. I understand a lot of people getting started with Django don't have a lot of familiarity with Linux, and it's a whole new world to get acquainted with, but for the purposes of deployment, it's not so much a concept as it is an implementation detail. &lt;/p&gt;
&lt;p&gt;Linux is just an operating system (more accurately, a family of operating systems). It just runs the computer that's going to be serving your site. That may be different than what you're used to, but it's not an entirely new concept. A new concept that's worth considering for deployment would be the idea of skipping the OS layer altogether (&lt;em&gt;ehhhhhhhh,&lt;/em&gt; sort of) and deploying with a serverless function. But we're going to count that as outside our purview. If you're capable of considering the pros and cons of going serverless, I think you probably already have a firm grasp of what we're going to get into here. üôÇÔ∏è&lt;/p&gt;
&lt;p&gt;I think when it comes to deploying a Django site, you have four overall concerns (and it might be three, depending on what you choose to do):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Static Files&lt;/li&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;li&gt;WSGI Server&lt;/li&gt;
&lt;li&gt;Web Server&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll also mention a couple of minor concerns as we go.&lt;/p&gt;
&lt;h2&gt;1. Static Files üìÅÔ∏è&lt;/h2&gt;
&lt;p&gt;The first thing that tends to throw beginners for a loop is all of a sudden we start worrying about what to do with static files. What's the deal? I thought Django was handling this for me. &lt;code&gt;{% static %}&lt;/code&gt;, right?&lt;/p&gt;
&lt;p&gt;Here's what's going on with static files. These are assets like your images, CSS stylesheets, and scripts. They're called "static" files because they aren't dynamically generated. Most of your Django project's pages are built with templates that get filled in with information by your program on demand when users request the page. That never happens with your images or CSS files. They're just files sitting on disk, ready to be served.&lt;/p&gt;
&lt;p&gt;Web servers (like &lt;a href="https://httpd.apache.org/"&gt;Apache&lt;/a&gt; or &lt;a href="https://nginx.org/en/"&gt;nginx&lt;/a&gt;) were built for the task of taking files on disk and serving them to users. That's where the web started. But we have a Django application because many pages need to be generated on demand with data from the database, we don't have them sitting on disk. A web server can't do that, we need an &lt;em&gt;application&lt;/em&gt; to generate those files. &lt;/p&gt;
&lt;p&gt;But since these static files aren't generated by your Django app, we don't &lt;em&gt;want&lt;/em&gt; Django to handle them. Your Django program is actually way slower than the web server for this job, so we want the web server to do it.&lt;/p&gt;
&lt;p&gt;How Django handles that is it stuffs all the static files into one directory (this will be &lt;a href="https://docs.djangoproject.com/en/stable/ref/settings/#static-files"&gt;STATIC_ROOT&lt;/a&gt; in your &lt;code&gt;settings.py&lt;/code&gt;). This makes it easy for the web server to look and find the files it needs to serve. Then, we use &lt;code&gt;{% static %}&lt;/code&gt; in our templates to tell Django that the request for this file needs to be passed along directly to the web server.&lt;/p&gt;
&lt;p&gt;Now, the reason all this might seem kind of new is because Django &lt;em&gt;has&lt;/em&gt; been handling static files for you in development. The Django development server (&lt;code&gt;manage.py runserver&lt;/code&gt;) has to handle those requests, because when you're developing locally it's the &lt;em&gt;only&lt;/em&gt; web server available. But when you deploy, you'll have to use a better web server than that, and that server will be quite capable of handling static files on its own.&lt;/p&gt;
&lt;p&gt;Configuring a web server to handle static file requests is beyond the scope of this post, but here's a &lt;a href="https://realpython.com/django-nginx-gunicorn/#serving-static-files-directly-with-nginx"&gt;helpful guide&lt;/a&gt; on the topic. Give it a try! I was pleasantly surprised at how straightforward it was to write an nginx configuration file.&lt;/p&gt;
&lt;p&gt;Once you've set a &lt;code&gt;STATIC_ROOT&lt;/code&gt; to stuff your static files in, you can actually stuff them there by running &lt;code&gt;manage.py collectstatic&lt;/code&gt;. You'll have to do this anytime you change any of your static files.&lt;/p&gt;
&lt;h3&gt;Whitenoise&lt;/h3&gt;
&lt;p&gt;It might be the case that for whatever reason you don't have access to be able to configure the web server for your site. In that case, your best option might be to use a tool called &lt;a href="https://pypi.org/project/whitenoise/"&gt;Whitenoise&lt;/a&gt;. This is a middleware that you can use in your Django app. If you don't know this, a Django request passes through all the different middlewares (listed in &lt;code&gt;settings.py&lt;/code&gt;), and they each get their turn to do something. The Whitenoise middleware checks to see if the request is for a static file, and if so, it interrupts the rest of the request cycle (which would be slow) and immediately serves up the static file.&lt;/p&gt;
&lt;p&gt;You might also opt for this option if you're lazy. But don't&amp;mdash;it still isn't as fast as a web server handling this directly, and configuring nginx really isn't that hard. If you're a web developer, you should understand the tools used to run your code. &lt;/p&gt;
&lt;h3&gt;Media Files&lt;/h3&gt;
&lt;p&gt;It's worth mentioning that the same concerns apply to user-uploaded content, what Django calls "media files". If you have a site where users can e.g. upload a profile picture, you'll want to &lt;a href="https://docs.djangoproject.com/en/stable/howto/deployment/checklist/#media-root-and-media-url"&gt;configure these&lt;/a&gt; as well.&lt;/p&gt;
&lt;h2&gt;2. Database üíæÔ∏è&lt;/h2&gt;
&lt;p&gt;The next thing that you'll have to pay some thought to in deployment is your database situation. &lt;/p&gt;
&lt;p&gt;In development, you've been using a local SQLite file. SQLite is really nifty, because it keeps everything in one single file. Since you don't "connect" to it, you don't have to handle connection details. Your &lt;code&gt;DATABASE&lt;/code&gt; section in &lt;code&gt;settings.py&lt;/code&gt; is pretty simple. &lt;/p&gt;
&lt;p&gt;In deployment, SQLite may not be suitable (though it's &lt;a href="https://fly.io/blog/sqlite-internals-wal/"&gt;more capable than you're often led to believe&lt;/a&gt;). Generally if you're using some sort of cloud provider, you'll be connecting to a database that's managed for you. This isn't usually different for your app in any material way (though &lt;a href="https://docs.djangoproject.com/en/stable/ref/databases/"&gt;databases differ&lt;/a&gt; in both features and limitations), but it is a rather important detail of deployment you need to be aware of.&lt;/p&gt;
&lt;p&gt;The important difference will be that you'll need to configure connection details in your &lt;code&gt;settings.py&lt;/code&gt;. This will mean adding a host address, port, username and password. It'll wind up looking something like this example from the &lt;a href="https://docs.djangoproject.com/en/stable/ref/settings/#databases"&gt;Django docs&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.postgresql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mydatabase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mydatabaseuser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mypassword&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;5432&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the plaintext user and password&amp;mdash;we'll return to this topic later.&lt;/p&gt;
&lt;p&gt;Once you've got your deployment database set up, you'll want to run &lt;code&gt;manage.py migrate&lt;/code&gt; to set it up for the first time, just like you did way back at the beginning of your project to set up SQLite. From that point onward, you should be good to go.&lt;/p&gt;
&lt;h2&gt;3. WSGI Server ü•ÉÔ∏è&lt;/h2&gt;
&lt;p&gt;Now we get to an important lesson in understanding how your Django app &lt;em&gt;actually runs.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In development, you've been using &lt;code&gt;manage.py&lt;/code&gt; to run your app. But as the name would suggest, &lt;code&gt;manage.py&lt;/code&gt; is just a management script. How do we run our Django app in a production environment?&lt;/p&gt;
&lt;p&gt;You'll recall that we talked about having a web server (like nginx) installed. This is the piece of software that receives HTTP requests and returns HTTP responses. Web servers are great at serving files off of the computer's disk. But we have Django apps (or PHP apps, or web apps written in any other language or framework) to generate web pages on demand. So we have a web server that accepts requests and returns responses, and we have a web application that is capable of generating pages on demand.&lt;/p&gt;
&lt;p&gt;How do we get these two things to work together though? The web server just handles files, how do we make it talk to another application?&lt;/p&gt;
&lt;p&gt;In older days, a standard was defined called &lt;a href="https://en.wikipedia.org/wiki/Common_Gateway_Interface"&gt;CGI&lt;/a&gt; (or Common Gateway Interface). Basically, the way it worked was when a web server received a request that needed to be handled by the web application, it would call a CGI script (these are usually written in Perl) and pass information about the request as arguments over &lt;a href="https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)"&gt;standard input&lt;/a&gt;. That script could the call the web application the way it needed to be called and pass it the appropriate info.&lt;/p&gt;
&lt;p&gt;In Python land, we have a similar standard called &lt;a href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface"&gt;WSGI&lt;/a&gt; (or Web Server Gateway Interface). It's usually pronounced &lt;em&gt;whizz-ghee.&lt;/em&gt; The way this works is the web server passes the request over to a WSGI server (like &lt;a href="https://pypi.org/project/gunicorn/"&gt;gunicorn&lt;/a&gt; or &lt;a href="https://pypi.org/project/waitress/"&gt;Waitress&lt;/a&gt;). That WSGI server runs a WSGI callable for your application. How on earth do I make that, you ask? Django already did it for you when you ran &lt;code&gt;startproject&lt;/code&gt;&amp;mdash;it's in the &lt;code&gt;wsgi.py&lt;/code&gt; file. &lt;/p&gt;
&lt;p&gt;So, you need to install a WSGI server, and pass it your &lt;code&gt;wsgi.py&lt;/code&gt; file to run. If you're setting up a virtual machine, you might write a script to run this on boot, or use a &lt;a href="https://vsupalov.com/django-systemd-crashcourse/"&gt;systemd service&lt;/a&gt;. Then, you &lt;a href="https://realpython.com/django-nginx-gunicorn/#incorporating-nginx"&gt;configure the web server&lt;/a&gt; to pass requests over to the WSGI server. The WSGI server will run it through your Django app, and after generating the appropriate page, pass that response back to the web server to hand off to your user.&lt;/p&gt;
&lt;h3&gt;ASGI&lt;/h3&gt;
&lt;p&gt;You might also hear about &lt;a href="https://en.wikipedia.org/wiki/Asynchronous_Server_Gateway_Interface"&gt;ASGI&lt;/a&gt; (azzz-ghee), or the &lt;em&gt;asynchronous&lt;/em&gt; server gateway interface. As asynchronicity becomes easier and more popular in Python and other programming languages, web frameworks are looking to leverage that. Someday soon, this'll become the standard way to run your web app. As far as I understand, it's designed to be pretty similar to WSGI, just asynchronous. As far as your Django deployments go, it'll probably just mean you use &lt;code&gt;asgi.py&lt;/code&gt; instead of &lt;code&gt;wsgi.py&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;4. Web Server üï∏Ô∏è&lt;/h2&gt;
&lt;p&gt;We've already talked about it a bit, but the last big deployment concern is setting up the web server which will be standing in front of your Django app.&lt;/p&gt;
&lt;p&gt;As we alluded to earlier, &lt;a href="https://httpd.apache.org/"&gt;Apache&lt;/a&gt; and &lt;a href="https://nginx.org/en/"&gt;nginx&lt;/a&gt; are going to be your two main options. Configuring either of them is beyond our scope here. If you don't know which to choose, nginx tends to be more popular these days, on account of how it handles requests within threads (it tends to be more efficient, and thus faster). Apache's a venerable old warhorse though, and it's a perfectly acceptable option. It ran much of the internet of the last two decades or more.&lt;/p&gt;
&lt;p&gt;Depending on how you choose to deploy though, you might not need to worry about your web server at all. There are a number of routes to go, but most of the time you'll be looking at either a virtual machine (VM/VPS) or platform-as-a-service (PaaS). &lt;/p&gt;
&lt;p&gt;A virtual machine (or virtual private server) is basically a rented computer. You can get these from providers like &lt;a href="https://www.linode.com/lp/refer/?r=a4d4d262b7f9176323aa169ee6a142978b235dda"&gt;Linode&lt;/a&gt; (disclaimer: this is a referral link) for as little as $5 a month. This is basically a Linux server that you can SSH into. It'll be a very manual setup process, with little handholding. But, you'll understand every step of the way. If you go this route, you'll be responsible for everything about the server: restarting it if it goes down, tracking and rotating log files, managing security settings and updates, etc.&lt;/p&gt;
&lt;p&gt;A platform-as-a-service is kind of different. Basically, the provider will abstract away the underlying computer, and you just focus on your app. You get your code uploaded, provide some details about hooking up a database, static files, where the script to execute is, etc., and you don't have to worry about the server-y stuff like worrying about updates, checking logs, or understanding security settings. You also wouldn't have to configure a web server, the provider would handle that for you. You mostly likely wouldn't even know which web server they're using under the hood. PaaS usually costs a little bit more than a $5 VPS, but if you don't want to become a part-time system administrator, then it's easily worth it.&lt;/p&gt;
&lt;p&gt;Heroku is the original platform-as-a-service provider, but they've been in a bit of hot water lately for ending their free tier. I personally don't like it because I think it obfuscates and papers over the issues that I've covered here. &lt;a href="https://testdriven.io/blog/heroku-alternatives/"&gt;Other options abound&lt;/a&gt;. I use a PaaS provider called &lt;a href="https://www.pythonanywhere.com/"&gt;PythonAnywhere&lt;/a&gt;. I think they've done a good job at keeping the control panels focused on the details we're talking about in this post. They also have a free tier for those just getting started.&lt;/p&gt;
&lt;h2&gt;Getting Code onto the Thing üì¶Ô∏è&lt;/h2&gt;
&lt;p&gt;There's a couple of other minor concerns aside from what we've already mentioned, one of which is how you actually get your code onto the thing you're deploying to. There's a lot of flexibility here. In the old days, it would have been &lt;code&gt;rsync&lt;/code&gt;ing the folder from your computer to the server. These days, since most developers are using &lt;code&gt;git&lt;/code&gt;, they just run &lt;code&gt;git clone&lt;/code&gt; on the server to pull down the repository (then, you can &lt;code&gt;git pull&lt;/code&gt; anytime you make changes to your program). Your provider might even offer you a point-and-click file manager (PythonAnywhere does) and you can just manually upload your code folder that way.&lt;/p&gt;
&lt;p&gt;There's a number of ways to do it, none of which are very hard. &lt;/p&gt;
&lt;h2&gt;Secrets üîíÔ∏è&lt;/h2&gt;
&lt;p&gt;The last thing we should mention is handling secrets. You'll remember earlier in our database config our example had the user and password stored right there in &lt;code&gt;settings.py&lt;/code&gt;. We don't really want to keep sensitive info like that in code, because we don't want it to be commited to version control, like &lt;code&gt;git&lt;/code&gt;. Even if you have something like a private Github repository, there's a risk of someone getting access to your code. Once you've committed a password to &lt;code&gt;git&lt;/code&gt;, it's basically impossible (not &lt;em&gt;technically,&lt;/em&gt; but it's extremely difficult, and even then it might be too late) to get it out of your repository's commit history. It's better to handle secrets another way.&lt;/p&gt;
&lt;p&gt;There are two primary schools of thought on this. The older convention for doing this would be to have two &lt;code&gt;settings.py&lt;/code&gt; files, one for development and one for deployment, which is &lt;strong&gt;never&lt;/strong&gt; committed to version control. The way people tend to do this these days is with environment variables, which are pieces of data that are stored in the runtime environment of the computer running your code. &lt;/p&gt;
&lt;p&gt;There are a few ways to get at environment variables from within a Python script. Personally, I find the &lt;a href="https://pypi.org/project/python-decouple/"&gt;python-decouple&lt;/a&gt; package straightforward and easy to use. It allows me to store database credentials and my &lt;a href="https://docs.djangoproject.com/en/stable/ref/settings/#secret-key"&gt;SECRET_KEY&lt;/a&gt; in a file called &lt;code&gt;.env&lt;/code&gt; (which, again, should &lt;strong&gt;never&lt;/strong&gt; be commited to version control). Then, I can get at those values with &lt;code&gt;decouple.config()&lt;/code&gt;. Options abound though, and find whatever's right for you. Just make sure your secrets aren't committed to code.&lt;/p&gt;
&lt;h2&gt;Django's Deployment Checklist ‚úÖÔ∏è&lt;/h2&gt;
&lt;p&gt;It's worth mentioning that Django has it's own built-in &lt;a href="https://docs.djangoproject.com/en/stable/howto/deployment/checklist/"&gt;deployment checklist&lt;/a&gt; to help you think through some of the things involved in deployment. To use it, just run &lt;code&gt;manage.py check --deploy&lt;/code&gt;, and you'll get feedback on anything that needs attention.&lt;/p&gt;
&lt;h2&gt;django-simple-deploy&lt;/h2&gt;
&lt;p&gt;Eric Matthes has a wonderful project going called &lt;a href="https://django-simple-deploy.readthedocs.io/en/latest/"&gt;django-simple-deploy&lt;/a&gt;, which aims to be a utility that you can run against your code, and it will automatically handle all the steps needed to get your code deployed. The idea is not to abstract away the deployment process, but to be something that helps a newcomer get their code online, then they can compare the changes it made to their code settings and learn how exactly it went about it. As of writing, it supports deploying to Fly.io, Platform.sh, and Heroku. More platforms should be on the way.&lt;/p&gt;
&lt;h2&gt;Wrapping Up üéÅÔ∏è&lt;/h2&gt;
&lt;p&gt;There's a lot of other things we could talk about. Should you containerize your app with Docker? Should you deploy with a serverless function? Which database is the best database? These are all good next steps to consider. &lt;/p&gt;
&lt;p&gt;At bare minimum, I hope I've shown that these four major concerns (static files, database, WSGI server, and web server) are the places to begin when figuring out how to deploy your Django application. If you can get your head wrapped around these things, you'll be able to get your app online and make it to "Hello World". The rest are details that you'll pick up as you continue to develop and get comfortable putting your work online.&lt;/p&gt;
&lt;footer style="font-weight: bold; text-align: center;"&gt;
Found this helpful? &lt;a href="https://ko-fi.com/iamjameswalters"&gt;Buy me a coffee!&lt;/a&gt; ‚òïÔ∏è
&lt;/footer&gt;</content><category term="Python"></category><category term="Django"></category><category term="deployment"></category></entry><entry><title>The Road Less Traveled: Understanding XPaths</title><link href="https://james.walters.click/the-road-less-traveled-understanding-xpaths.html" rel="alternate"></link><published>2023-01-26T00:00:00-05:00</published><updated>2023-01-26T00:00:00-05:00</updated><author><name>James Walters</name></author><id>tag:james.walters.click,2023-01-26:/the-road-less-traveled-understanding-xpaths.html</id><summary type="html">&lt;p&gt;The other day I started writing a web automation tool to do some chores for me at work. This was my first time using &lt;a href="https://www.selenium.dev/"&gt;Selenium&lt;/a&gt;, a handy dandy library for driving web browsers in code.&lt;/p&gt;
&lt;p&gt;When it comes to getting a hold of elements in the page you want to ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;The other day I started writing a web automation tool to do some chores for me at work. This was my first time using &lt;a href="https://www.selenium.dev/"&gt;Selenium&lt;/a&gt;, a handy dandy library for driving web browsers in code.&lt;/p&gt;
&lt;p&gt;When it comes to getting a hold of elements in the page you want to interact with, Selenium offers the usual ID and class-based CSS selectors. Since I was trying to navigate a page written in React though, most of that information was &lt;a href="https://www.reddit.com/r/webdev/comments/lucdnp/why_are_class_names_like_this_in_facebook_and/"&gt;randomly generated&lt;/a&gt;. I needed to get at elements by grabbing onto an easily accessible anchor, then using it as a reference point from which to step through the document tree and get at what I was looking for. Since it's 2023, I of course expected to use some facsimile to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction"&gt;Javascript DOM API&lt;/a&gt;. A &lt;code&gt;.parentElement&lt;/code&gt; here, a &lt;code&gt;.firstChild&lt;/code&gt; there, and I'd be able to grab that pesky button nested within three generic &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s and click it. &lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/"&gt;BeautifulSoup&lt;/a&gt; works this way, why wouldn't Selenium?&lt;/p&gt;
&lt;p&gt;It turns out that, no, Selenium does &lt;em&gt;not&lt;/em&gt; work this way. For whatever reason, instead of something resembling the DOM API, Selenium uses &lt;a href="https://en.wikipedia.org/wiki/XPath"&gt;XPaths&lt;/a&gt;. When I first started trying to write these things, they struck me as a bit ersatz, landing somewhere along the spectrum between filepaths and regular expressions. But I have to say, they've grown on me a bit, mostly because they're far and away the best tool Selenium gives you for finding elements on the page. &lt;/p&gt;
&lt;h2&gt;Happy Little (Document) Trees üå≥Ô∏è&lt;/h2&gt;
&lt;p&gt;XPaths (the XML Path Language) are based around the idea of seeing the HTML document as a tree of nodes. Let's take the following HTML for our examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-markup"&gt;
&lt;script type="prism-html-markup"&gt; 
&lt;html&gt;
  &lt;body&gt;
    &lt;h1&gt;Hello World!&lt;/h1&gt;
    &lt;p&gt;
      I'd like to welcome you all to this web page. Check out my stuff!
    &lt;/p&gt;
    &lt;p id="label"&gt;Things I like:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Cats&lt;/li&gt;
      &lt;li&gt;Video games&lt;/li&gt;
      &lt;li&gt;Pizza&lt;/li&gt;
    &lt;/ul&gt;
    &lt;button&gt;
      &lt;span style="font-weight: bold;"&gt;Enjoy this page?&lt;/span&gt; Let me know!
    &lt;/button&gt;
  &lt;/body&gt;
&lt;/html&gt;
&lt;/script&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we wanted to write an XPath to target the header at the top of the page, we might write something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/html/body/h1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's break that down. The opening slash &lt;code&gt;/&lt;/code&gt; means the root of the document, the beginning of everything. This is very similar to the root &lt;code&gt;/&lt;/code&gt; in &lt;a href="https://en.wikipedia.org/wiki/Root_directory"&gt;UNIX filepaths&lt;/a&gt;. There's only one element in the root of our document: &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;. So, that's what we type next. Then, within the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag, we select the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag, and then the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; within it. Because this XPath starts at the root of our document and walks through nodes in the tree to get to the one we want, it's kind of like an absolute filepath.&lt;/p&gt;
&lt;p&gt;Pretty straightforward. But, here's another way we could get at that header:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;//h1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What's going on here? Whereas the single slash &lt;code&gt;/&lt;/code&gt; means that what comes after it must be immediately within the node that comes before the slash, the double slash &lt;code&gt;//&lt;/code&gt; means that it should be &lt;em&gt;somewhere&lt;/em&gt; inside it. It allows us to find things that are nested a few layers in. So in this case, we're looking for an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; that's somewhere within the root of the document.&lt;/p&gt;
&lt;p&gt;Here's another example of this in action:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/html/body//span
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This XPath says that in the root of our document there should be a &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; node, and within that a &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; node. Then, &lt;em&gt;anywhere&lt;/em&gt; within &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, we want a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;. This would select the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; from our example, even though it's inside a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So far our XPaths have only matched one node in our document. But what do we do if we want to select a specific item from a handful of nodes that match our XPath? Let's look at our next example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/html/body/ul/li
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You probably guessed that this XPath selects an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; node in our unordered list. But which one? That XPath matches all three list items (and left this way, would return them all). &lt;/p&gt;
&lt;p&gt;We can use an index to get at a specific node matching the XPath. If we want to select "Video Games", we can modify our XPath this way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/html/body/ul/li[2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that XPath indexes are &lt;strong&gt;not&lt;/strong&gt; like Python indexes&amp;mdash;they start at &lt;code&gt;1&lt;/code&gt;, not &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Predicate Predicaments ü§îÔ∏è&lt;/h2&gt;
&lt;p&gt;Those brackets &lt;code&gt;[]&lt;/code&gt; in the last example constitute a predicate clause. They allow you to specify something that should be true about the element your selecting. In this case, we were specifying that the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; we select should be the second child of the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;There are other predicates available for us. For instance, we can predicate based on an element's property:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;@id=&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This XPath selects a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; node that has an &lt;code&gt;id&lt;/code&gt; property with a value of &lt;code&gt;label&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;You might also be wondering, is it possible to select the value of the &lt;code&gt;id&lt;/code&gt; itself? Why yes, you can!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;@id&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This XPath would select the value of the &lt;code&gt;id&lt;/code&gt;&amp;mdash;that is, it would return the string &lt;code&gt;label&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A particularly helpful predicate we can use is checking an element's text with the &lt;code&gt;text()&lt;/code&gt; function. For example, if we wanted to select the list item that says "Cats", we could do so like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;//li[text()=&amp;#39;Cats&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that this will only work for an &lt;em&gt;exact&lt;/em&gt; match. The entire text must be "Cats". If you want to check if an element's text &lt;em&gt;contains&lt;/em&gt; something, well, you'll need the &lt;code&gt;contains()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/html//p[contains(text(), &amp;#39;like&amp;#39;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;contains()&lt;/code&gt; function takes two positional arguments: the first for the thing to check, and the second for the value to look for. In this expression, we're looking for a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element whose text contains &lt;code&gt;like&lt;/code&gt;. Since both &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags in our example have the word 'like' in them, they both get selected. &lt;/p&gt;
&lt;p&gt;Predicates can also be chained. If we wanted to narrow down our selection to the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; with &lt;code&gt;id="label"&lt;/code&gt;, we can add that predicate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;contains(text(), &amp;#39;like&amp;#39;)&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;@id=&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;!--
Actually, there's another issue lurking here, one that gave me quite a headache.

If we wanted to try and select our button based on it containing the phrase "Let me know!", we might try this:


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;//button[contains(text(), &amp;#39;Let me know!)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



But this won't work. How come?

After some spelunking, I came across a [Stack Overflow answer](https://stackoverflow.com/questions/3655549/xpath-containstext-some-string-doesnt-work-when-used-with-node-with-more) (of course) that explained it. I'll leave the details of that answer to you, but to sum it up, because the button contains not just text but a `&lt;span&gt;` element as well, `text()` returns a *list* of nodes. We then want to check *each* of those nodes (one of which is the "Let me know!" text) for a match of our string. In order to do that, we need something like this:


--&gt;

&lt;h2&gt;Additional Resources üìöÔ∏è&lt;/h2&gt;
&lt;p&gt;We've only scratched the surface of XPath syntax. If you're looking for a deeper dive, I found the cheat sheet at &lt;a href="https://devhints.io/xpath"&gt;devhints.io&lt;/a&gt; incredibly helpful. Not only does it get into a wide variety of XPath syntax, but it also offers some translation between query paradigms you might be more familiar with, such as CSS selectors or JQuery. It has some helpful notes about a few gotchas in there&amp;mdash;think you know how to write an XPath querying an element's class? &lt;a href="https://devhints.io/xpath#class-check"&gt;Think again!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally, I think that the single best tool for wrangling with XPaths is hidden within your browser's devtools. I've yet to check Firefox, but using Chromium-based browsers like Brave and Edge, I learned that you can inspect an element, right-click on it in the code view, and under the "Copy" option, you can copy an XPath for that element. This can help a lot if you're trying to figure out how to write an XPath for something in Selenium! &lt;/p&gt;
&lt;p&gt;&lt;img alt="Right-click to copy an element's XPath" src="https://james.walters.click/images/xpath1.png"&gt;&lt;/p&gt;
&lt;p&gt;Also, using Ctrl-F in that inspector will let you test out XPaths and see which elements on the page satisfy it&amp;mdash;just write your XPath in the Ctrl-F dialog and massage it until it selects what you're looking for.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Type XPath expressions right into Ctrl-F to test" src="https://james.walters.click/images/xpath2.png"&gt;&lt;/p&gt;
&lt;p&gt;So there you go, a whole different way to navigate HTML documents that was hiding right under our noses. The XPath road may be less traveled than the DOM highway, but I think I might be taking it a little more often from now on.&lt;/p&gt;
&lt;footer style="font-weight: bold; text-align: center;"&gt;
Found this helpful? &lt;a href="https://ko-fi.com/iamjameswalters"&gt;Buy me a coffee!&lt;/a&gt; ‚òïÔ∏è
&lt;/footer&gt;</content><category term="Web"></category><category term="Selenium"></category><category term="XPaths"></category><category term="Web Scraping"></category><category term="HTML"></category><category term="XML"></category></entry><entry><title>Confessions of a Linux Grandpa: An Oral History #2</title><link href="https://james.walters.click/confessions-of-a-linux-grandpa-an-oral-history-2.html" rel="alternate"></link><published>2022-10-28T00:00:00-04:00</published><updated>2022-10-28T00:00:00-04:00</updated><author><name>James Walters</name></author><id>tag:james.walters.click,2022-10-28:/confessions-of-a-linux-grandpa-an-oral-history-2.html</id><summary type="html">&lt;p&gt;Hello again Sparky! Have you come for another story about the glory days of desktop Linux? Well who am I to disappoint? üë¥Ô∏è&lt;/p&gt;
&lt;p&gt;Now, where did we leave off? Oh yes! I was running Ubuntu on the old Toshiba...&lt;/p&gt;
&lt;h2&gt;Grandpa, what was Ubuntu like?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Gutsy Gibbon" src="https://james.walters.click/images/ubuntu-7-10-gutsy.png"&gt;&lt;/p&gt;
&lt;p&gt;This was Ubuntu, at the end of ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello again Sparky! Have you come for another story about the glory days of desktop Linux? Well who am I to disappoint? üë¥Ô∏è&lt;/p&gt;
&lt;p&gt;Now, where did we leave off? Oh yes! I was running Ubuntu on the old Toshiba...&lt;/p&gt;
&lt;h2&gt;Grandpa, what was Ubuntu like?&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Gutsy Gibbon" src="https://james.walters.click/images/ubuntu-7-10-gutsy.png"&gt;&lt;/p&gt;
&lt;p&gt;This was Ubuntu, at the end of 2007. It was just then three years old. &lt;/p&gt;
&lt;p&gt;It was &lt;a href="https://en.wikipedia.org/wiki/Ubuntu_version_history#Ubuntu_7.10_(Gutsy_Gibbon)"&gt;Gutsy&lt;/a&gt;. It was &lt;a href="https://en.wikipedia.org/wiki/Ubuntu_philosophy"&gt;human&lt;/a&gt;. It was &lt;span style="color: orange"&gt;orange&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;And, it made &lt;a href="https://www.youtube.com/watch?v=NL3c4l6G6pM"&gt;this sound&lt;/a&gt; when you logged in.&lt;/p&gt;
&lt;p&gt;What you're looking at there in terms of the desktop is &lt;a href="https://en.wikipedia.org/wiki/GNOME#GNOME_2"&gt;GNOME 2&lt;/a&gt;. It offered split panels, one at the top for application menus and launchers (as well as task bar applets), and one on the bottom for window management and virtual desktops. &lt;/p&gt;
&lt;p&gt;Ah, how I &lt;em&gt;love&lt;/em&gt; those menus&amp;mdash;instead of cramming everything into one Start menu on Windows, here I had three distinct menus: one for applications, one for locations and folders on disk, and one for settings. üòôÔ∏èü§åÔ∏è&lt;/p&gt;
&lt;p&gt;It came with Firefox 2, by the way.&lt;/p&gt;
&lt;p&gt;I mentioned previously that my wireless card didn't work on this release: in order to get it working, I had to download the Windows driver from Realtek and install it with &lt;a href="https://en.wikipedia.org/wiki/NDISwrapper"&gt;&lt;code&gt;ndis-wrapper&lt;/code&gt;&lt;/a&gt;. This was a common problem in those days, it would be a few years before the wifi situation improved on Linux. As for this laptop, a driver would make its way into the kernel in the very next release&amp;mdash;it worked out of the box in 8.04 Hardy Heron.&lt;/p&gt;
&lt;p&gt;Speaking of installing stuff, there was no "app store" like there is these days, Ubuntu Software Centre [sic] or GNOME Software or whatever. Back then, you had &lt;a href="https://en.wikipedia.org/wiki/Synaptic_(software)"&gt;Synaptic Package Manager&lt;/a&gt;, which was itself rather new still. It is, essentially, a graphical browser of the packages in the repositories you were configured to use. I still install it on my machines today&amp;mdash;it's quite handy to have around when you need to look at what's inside a metapackage or don't want to have to reach for &lt;code&gt;apt&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;We called it "bling" ü•áÔ∏è&lt;/h2&gt;
&lt;p&gt;As a devoted Linux user, I was eager to brandish that identity however I could. You might know of a little computer company in Denver called System76. They've certainly come along way over the last 15 years or so. Back in the day, they would &lt;a href="https://web.archive.org/web/20080430063103/http://system76.com/article_info.php?articles_id=9"&gt;send you some free stickers&lt;/a&gt; if you sent in a self-addressed envelope. They were a parody of the OS badges that computers came with that said "Powered by Windows XP" and the like. Here's what they looked like: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Powered by Ubuntu" src="https://james.walters.click/images/powered-by-ubuntu.png"&gt;&lt;/p&gt;
&lt;p&gt;When I sent for mine, I received not only the OS badges, but also some Ubuntu logos for overlaying the &lt;span style="text-decoration: line-through"&gt;Windows key&lt;/span&gt; &lt;a href="https://en.wikipedia.org/wiki/Super_key_(keyboard_button)"&gt;super key&lt;/a&gt;. üòôÔ∏èü§åÔ∏è&lt;/p&gt;
&lt;p&gt;They don't have the OS badges anymore, but System76 will &lt;a href="https://system76.com/merch/stickers"&gt;still send you stickers today&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also went as far as to register this laptop on some list of registered Linux machines I found out there on the web. The home page would list how many registered Linux computers they were tracking. Of course, this was hardly scientific, it was entirely opt-in and who knows who had actually heard of it? I had discovered it through a badge in someone's forum signature containing their "ID number".&lt;/p&gt;
&lt;p&gt;Alas, I'm afraid the name and URL of this site have long ago passed from Linux Grandpa's memory.&lt;/p&gt;
&lt;h2&gt;On the Perils of Dual Booting&lt;/h2&gt;
&lt;p&gt;I'll close by sharing an early blunder, perhaps my first with Linux.&lt;/p&gt;
&lt;p&gt;After installing this and playing around with it for a bit, I decided that I wanted to go back to Windows (this laptop came with Vista). This was only my first foray into Linux, and while I enjoyed it, I was ready to return to the safety of home.&lt;/p&gt;
&lt;p&gt;I hadn't &lt;a href="https://en.wikipedia.org/wiki/Disk_formatting#REFORMAT"&gt;nuked and paved&lt;/a&gt; Windows; instead, I installed Ubuntu in a &lt;a href="https://en.wikipedia.org/wiki/Multi-booting#Microsoft_Windows_and_Linux"&gt;dual boot&lt;/a&gt; setup. This meant that I split the disk into two partitions: one had Windows, the other Ubuntu. Going back to normal should be as simple as wiping out the Ubuntu side.&lt;/p&gt;
&lt;p&gt;So, that's exactly what I did. And after completing that operation, I rebooted and...the computer couldn't boot.&lt;/p&gt;
&lt;p&gt;The problem? The &lt;a href="https://en.wikipedia.org/wiki/Master_boot_record"&gt;master boot record&lt;/a&gt; (MBR) was pointing to something that didn't exist.&lt;/p&gt;
&lt;p&gt;The master boot record was a little (512 bytes) sector that told the computer where to boot from. As computers (and kernels) grew to become larger and more complex, the MBR would just point to a bootloader, which would take care of the rest.&lt;/p&gt;
&lt;p&gt;Originally, Windows had made the MBR point to its own bootloader. When I installed Ubuntu, it had to rewrite the MBR to point to &lt;a href="https://en.wikipedia.org/wiki/GNU_GRUB"&gt;&lt;code&gt;GRUB&lt;/code&gt;&lt;/a&gt;, which would offer boot options for both Ubuntu and Windows.&lt;/p&gt;
&lt;p&gt;Well, when I wiped out my Ubuntu partition, I also wiped out GRUB, which meant that the MBR was pointing to something that didn't exist.&lt;/p&gt;
&lt;p&gt;Fortunately, with a little Googling, this wasn't &lt;em&gt;too&lt;/em&gt; difficult to fix: I reached for my trusty Windows install disc, and booted into the recovery utility. From there, I accessed some sort of recovery shell that let me run some command incantation involving a &lt;code&gt;/fixmbr&lt;/code&gt; flag or something, and it repaired the MBR.&lt;/p&gt;
&lt;p&gt;Of course, this was all long enough ago that computers still used MBRs&amp;mdash;do we still use them on &lt;a href="https://en.wikipedia.org/wiki/UEFI#Disk_device_compatibility"&gt;UEFI&lt;/a&gt; machines? ¬Ø\_(„ÉÑ)_/¬Ø&lt;/p&gt;
&lt;p&gt;At any rate, this was the first (not the last!) time I got myself out of a Linux pickle. At this early stage, it's a good thing I managed it&amp;mdash;if I'd had to go groveling to my dad and have him fix my computer, he surely would have discouraged me from any further experiments.&lt;/p&gt;
&lt;p&gt;That's all for this time, Sparky! As a reward for your attention, enjoy yourself another ASCII Original.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ASCII Original" src="https://james.walters.click/images/asciioriginal.png"&gt;&lt;/p&gt;
&lt;footer style="text-align: center;font-weight: bold;"&gt;
Wait, I'm lost&amp;mdash;&lt;a href="https://james.walters.click/tag/linux-grandpa.html"&gt;start from the beginning&lt;/a&gt;!
&lt;/footer&gt;</content><category term="Linux"></category><category term="Linux Grandpa"></category><category term="oral histories"></category></entry><entry><title>Software Development for the Masses</title><link href="https://james.walters.click/software-development-for-the-masses.html" rel="alternate"></link><published>2022-09-19T00:00:00-04:00</published><updated>2022-09-19T00:00:00-04:00</updated><author><name>James Walters</name></author><id>tag:james.walters.click,2022-09-19:/software-development-for-the-masses.html</id><summary type="html">&lt;p&gt;Some years ago, I was kicking around in the &lt;a href="https://ubuntu-mate.org/irc/"&gt;Ubuntu MATE IRC room&lt;/a&gt;, and I asked &lt;a href="https://wimpress.com/"&gt;Martin Wimpress&lt;/a&gt; for his advice on getting started with programming. I've &lt;a href="https://james.walters.click/confessions-of-a-linux-grandpa-an-oral-history-1.html"&gt;noted previously&lt;/a&gt; my fascination with operating systems, so I was expecting that the man behind my distro of choice would refer me to ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some years ago, I was kicking around in the &lt;a href="https://ubuntu-mate.org/irc/"&gt;Ubuntu MATE IRC room&lt;/a&gt;, and I asked &lt;a href="https://wimpress.com/"&gt;Martin Wimpress&lt;/a&gt; for his advice on getting started with programming. I've &lt;a href="https://james.walters.click/confessions-of-a-linux-grandpa-an-oral-history-1.html"&gt;noted previously&lt;/a&gt; my fascination with operating systems, so I was expecting that the man behind my distro of choice would refer me to a great resource on C. I was a little miffed when he instead pointed me toward Python.&lt;/p&gt;
&lt;p&gt;He told me, to my surprise and interest, that he had built the fantastic Ubuntu MATE &lt;a href="https://ubuntu-mate.org/features/welcome/"&gt;Welcome app&lt;/a&gt; (which is &lt;a href="https://ubuntubudgie.org/"&gt;often imitated&lt;/a&gt;) with Python, along with some webby stuff for the frontend. I didn't walk away from that conversation and go learn Python, but it did sow a seed in the back of my mind.&lt;/p&gt;
&lt;h2&gt;How was your weekend?&lt;/h2&gt;
&lt;p&gt;It is often quipped, "I learned Python&amp;mdash;it was a great weekend," on account of the ease with which Python is picked up. I lived a version of that story. My team at work stewards a terrible internal web app that we've dreamed of replacing for years. But, we're not developers. We've &lt;em&gt;had&lt;/em&gt; developers crop up among our ranks, but that's quite outside the scope of the job. But my manager and I came back around to this conversation late last year, and in a moment of my life where I was battling personal demons in the loneliness and dangerous boredom of working from home during the COVID-19 pandemic, I was ready to dive in when he suggested doing it ourselves with Python and Django.&lt;/p&gt;
&lt;p&gt;I bought a subscription to Codecademy Pro (I think I'd recommend &lt;a href="https://realpython.com/"&gt;RealPython&lt;/a&gt; today if you're looking to learn), and spent the next couple of months hammering at some Python and Django courses. By mid-January, we were ready to break ground.&lt;/p&gt;
&lt;h2&gt;Champagne üçæ and Beer üç∫&lt;/h2&gt;
&lt;p&gt;The end of that story is that I'm a Python developer. I continue to explore and learn more about the language, and it's the thing I reach for to solve a problem. So when I started this blog, I felt the need to address, at least briefly, why I like and use Python.&lt;/p&gt;
&lt;p&gt;But lots of people are doing that, because Python's great. The internet doesn't need another article about why Python's great. So, I'm trying not to do that here. But what I'd like to do is comment on something that is sometimes (albeit not always) overlooked.&lt;/p&gt;
&lt;p&gt;I remember years ago hearing Rachel Ray (I am a cultural dinosaur, you know) talk about being offered her TV show with Food Network. She protested at first, saying "I'm not a good fit, you guys are champagne, I'm beer." But they insisted that was exactly what they liked about her.&lt;/p&gt;
&lt;p&gt;Python's kind of the beer of the programming world. I do &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; mean by that to say that it is unrefined&amp;mdash;quite to the contrary, the Python community has assembled &lt;a href="https://en.wikipedia.org/wiki/Python_(programming_language)#Design_philosophy_and_features"&gt;sophisticated standards&lt;/a&gt; around how code should be written. What I mean is it's accessible; it has an appeal to people that are joining the programming community&amp;mdash;or perhaps, even people who are programming &lt;em&gt;outside&lt;/em&gt; of that community&amp;mdash;which other languages do not have. Why?&lt;/p&gt;
&lt;p&gt;Because they're champagne. They're languages written by pie-in-the-sky computer scientists, used by professional programmers who have learned how to think like a programmer, and have &lt;em&gt;un-&lt;/em&gt;learned how to think about programming like a regular person. The average person learning Python today isn't like me, who was happy to learn it for the joy of programming. The average Python beginner is a gradeschooler learning their first programming language, or an accountant who's sick of &lt;a href="https://en.wikipedia.org/wiki/Visual_Basic_for_Applications"&gt;VBA&lt;/a&gt;, or a scientist or statistician who just wants to run some quick analysis on some data and get it into a graph. These people aren't programmers by trade, and they don't care about what data type a variable is or why object-oriented programming is great or why you shouldn't manage state that way or how they could have written that &lt;code&gt;for&lt;/code&gt; loop more efficiently so that it ran 1048ms faster.&lt;/p&gt;
&lt;p&gt;They just want to do something. Python, more than any other language, stays out of the way and lets them do it. It doesn't make them manage memory, it doesn't make them trip on missing semicolons, it doesn't make them read through a bunch of noisy syntax. Whatever someone's trying to do, &lt;a href="https://peps.python.org/pep-0020/"&gt;there's at least one obvious way to do it&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;Vive La R√©volution üèÅ&lt;/h2&gt;
&lt;p&gt;I've heard &lt;a href="https://noumenal.es/"&gt;Carlton Gibson&lt;/a&gt; say at least once on &lt;a href="https://djangochat.com/"&gt;Django Chat&lt;/a&gt; that software development is currently like writing was 500 years ago: the average person would go pay a scribe to write out a letter for them, then they'd send it. But things didn't stay that way: people learned to write for themselves. Today, in the West and in many other wealthier countries, literacy rates are essentially 100%. &lt;em&gt;Everyone&lt;/em&gt; can write. That doesn't mean that everyone is &lt;em&gt;good&lt;/em&gt; at writing, that doesn't mean everyone &lt;em&gt;enjoys&lt;/em&gt; writing, and that doesn't mean that we no longer have a need for professional writers. We have more professional writers than we've ever had. What it means, though, is that when someone needs to write a letter, he can do it himself, without having to pay a scribe to do it. When someone needs to read an important document, he can do so with his own eyes, and he can fill out a form with his own hand.&lt;/p&gt;
&lt;p&gt;We're in the &lt;em&gt;middle&lt;/em&gt; of a technological revolution&amp;mdash;it isn't over yet. Yes, everyone (again, at least in the West and other wealthier places) has a smartphone in their pocket, or a laptop in their backpack, or at least a computer down at the library that they can use each day. But not everyone can program&amp;mdash;not everyone has fluency in the language of the machines they use.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://alsweigart.com/"&gt;Al Sweigart&lt;/a&gt; said something once that struck me as quite profound: people are limited by using software other people wrote. There are two kinds of people: those who look at a computer and say, "Wow, what an advanced machine, full of all this powerful software!" and those who say, "I can make this machine do &lt;em&gt;anything.&lt;/em&gt;" The former are users; the latter, programmers. And Python is the most effective language yet at making users into programmers.&lt;/p&gt;</content><category term="Python"></category></entry><entry><title>Confessions of a Linux Grandpa: An Oral History #1</title><link href="https://james.walters.click/confessions-of-a-linux-grandpa-an-oral-history-1.html" rel="alternate"></link><published>2022-09-13T00:00:00-04:00</published><updated>2022-09-13T00:00:00-04:00</updated><author><name>James Walters</name></author><id>tag:james.walters.click,2022-09-13:/confessions-of-a-linux-grandpa-an-oral-history-1.html</id><summary type="html">&lt;h3&gt;Let me spin you a yarn... üß∂ üë¥&lt;/h3&gt;
&lt;p&gt;I'm known to at least one friend as his "Linux grandpa" (I'm fairly certain I coined this phrase myself). We met while working together at my current company. He was (and is) a sharp developer. I hadn't really started development yet, or perhaps more ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Let me spin you a yarn... üß∂ üë¥&lt;/h3&gt;
&lt;p&gt;I'm known to at least one friend as his "Linux grandpa" (I'm fairly certain I coined this phrase myself). We met while working together at my current company. He was (and is) a sharp developer. I hadn't really started development yet, or perhaps more accurately, I had made several runs at &lt;a href="https://en.wikipedia.org/wiki/Lucy_Van_Pelt#Annual_football_strips"&gt;Lucy's football&lt;/a&gt; and wouldn't really have another go at it for some time. That made us both rather technically inclined, however.&lt;/p&gt;
&lt;p&gt;I don't remember exactly how we began talking about Linux. But somehow we did, and as those conversations unfolded, I realized I had witnessed quite a bit of history as a desktop Linux user.&lt;/p&gt;
&lt;p&gt;Now, I'm no neckbeard, mind you&amp;mdash;I'm not that old. I've yet to complete my third decade. I got into Linux in late 2007/early 2008, right as Ubuntu was really picking up steam. But still, that was &lt;em&gt;fifteen years ago,&lt;/em&gt; and a lot has happened in the Linux space in that span of time. &lt;/p&gt;
&lt;p&gt;So, if you have a moment, pull up a chair and listen to this first of many tales from the encompassing experiences of your Linux Grandpa. üêß üë¥&lt;/p&gt;
&lt;h3&gt;Open that window&lt;/h3&gt;
&lt;p&gt;Nobody starts as a Linux user, and neither did I. My first computer ran Windows 2000 (or perhaps, Windows ME). It had dial-up internet, and was perched upon a desk made of a sheet of plywood sawn into an L and stacked on top of &lt;a href="https://en.wikipedia.org/wiki/Milk_crate"&gt;milk crates&lt;/a&gt;. Eventually I wound up with an XP machine, and by this time, I had helped my dad build a computer or two, and I was old enough to begin taking a serious interest in the software that ran on them.&lt;/p&gt;
&lt;p&gt;I was quite curious about how the operating system actually worked. I was then and remain today oriented toward the bigger picture. It was this predilection that discouraged me from programming for many years, in fact. I thought I was cut out to be a system administrator, with that kind of a bent. At any rate, it was the OS layer that I found interesting, and as a youngster on Windows, poking around in the Control Panel gave a satisfying impression of how things worked. Then, I ascended to the monastic order of Power Users when I discovered the &lt;a href="http://dinesh.azurewebsites.net/hardwareandnetworking/Computer%20Networking%20-%20Lesson%208%20Administration_files/admintools1.gif"&gt;Administrative Tools&lt;/a&gt;. The Device Manager, the Registry&amp;mdash;it was all coming together.&lt;/p&gt;
&lt;p&gt;But then, I hit &lt;a href="https://www.youtube.com/watch?v=wKY_Bh53YDE"&gt;the wall&lt;/a&gt;. You know, &lt;a href="https://getyarn.io/yarn-clip/ea3fd0e0-d478-47b3-9353-24449ab7a00e"&gt;the curtain&lt;/a&gt;. The point in Windows where you can't peer any further into how the system works, how it's put together. I hadn't begun to exhaust the secrets of Windows&amp;mdash;there are whole industries and hobbyist groups built around a deep understanding of how it works. But for a kid in his bedroom poking around inside Windows itself, I'd gone about as far as I could go.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://www.youtube.com/watch?v=IxJUN6MCnKM"&gt;I don't like apples&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It was time to turn to an alternative operating system, something that might let me have more of a peek under the hood. So I turned to the only other operating system I had heard of&amp;mdash;Mac OS.&lt;/p&gt;
&lt;p&gt;Now, all but immediately, I ran into a problem: I did not have a Mac, and Mac OS only comes on Macs. And being a gradeschooler, I did not have disposable income&amp;mdash;certainly not Apple levels of disposable income&amp;mdash;to spend on such a thing. So, I found another solution.&lt;/p&gt;
&lt;p&gt;By this time, I had my own laptop: a Toshiba Satellite A205-S5804. I still have it today&amp;mdash;I keep it as a relic of an age when Toshiba still made laptops. It has one of the best laptop keyboards I've ever used, not because it's especially good, but because back then laptop keyboards didn't suck. &lt;/p&gt;
&lt;p&gt;The reason I remember that model number exactly is because I found a forum post that someone had written for making my &lt;em&gt;exact&lt;/em&gt; model of laptop into a Hackintosh. I dutifully followed those instructions, and sure enough, I had Mac OS (I believe this was Leopard, at the time) running on my laptop. And it took me all of perhaps a few days to tire of that ground-breaking experience, since Mac OS is locked down tighter than Windows is, especially when shoehorned onto non-Apple hardware. It was a novelty, but it was clear I wouldn't do or learn anything productive with such a machine.&lt;/p&gt;
&lt;h3&gt;African Names and Antarctic Mascots&lt;/h3&gt;
&lt;p&gt;Disappointed and desperate, I took to the internet, hoping for some other option. I had heard whispers of a thing called Linux, but had read "Oh, it's just for servers" and the like. I discovered that there's no such thing as "a Linux", but there are &lt;em&gt;distributions&lt;/em&gt; of Linux. I didn't even really understand what a kernel was&amp;mdash;I just understood that it was the core around which all these other operating systems were built. It was a lot to muck through, but it was &lt;em&gt;there.&lt;/em&gt; The information was out there on the internet, and as long as I was willing, I could find it and read it and understand whatever I could, and keep going.&lt;/p&gt;
&lt;p&gt;Searches around which distro to start with were, by this point in history, turning up Ubuntu, a new distro that put some nice spit-and-polish on Debian and made it more usable. "&lt;a href="https://www.reddit.com/r/Ubuntu/comments/77gcn4/does_ubuntu_still_use_linux_for_human_beings_as/"&gt;Linux for human beings&lt;/a&gt;," they called it. It was named after an African word that everyone struggles to pronounce.&lt;/p&gt;
&lt;p&gt;As I said above, this was late 2007/early 2008&amp;mdash;this date is made rather secure by the fact that my first Ubuntu version was 7.10, Gutsy Gibbon. You don't just forget your first Linux distro when it's called &lt;em&gt;Gutsy.&lt;/em&gt; When I first installed it, everything worked except the wireless card, a common problem back in those days. I had to use &lt;a href="https://en.wikipedia.org/wiki/NDISwrapper"&gt;&lt;code&gt;ndis-wrapper&lt;/code&gt;&lt;/a&gt; around the Windows driver to get it working. But on the following release, 8.04 Hardy Heron, it worked out of the box.&lt;/p&gt;
&lt;p&gt;It was nice! It was new! It was interesting! And it was open&amp;mdash;a guarantee that any time spent trying to understanding this system would not be wasted.&lt;/p&gt;
&lt;p&gt;And as for the lessons I learned? Well &lt;a href="https://en.wikipedia.org/wiki/Sparky"&gt;Sparky&lt;/a&gt;, that's a story for next time. For now, enjoy yourself a Werther's Original. &lt;/p&gt;
&lt;p&gt;(since this is the internet, it'll have to be an ASCII Original)&lt;/p&gt;
&lt;p&gt;&lt;img alt="ASCII Original" src="https://james.walters.click/images/asciioriginal.png"&gt;&lt;/p&gt;
&lt;footer style="text-align: center;font-weight: bold;"&gt;
&lt;a href="https://james.walters.click/tag/linux-grandpa.html"&gt;Tell me another story&lt;/a&gt;, Grandpa!
&lt;/footer&gt;</content><category term="Linux"></category><category term="Linux Grandpa"></category><category term="oral histories"></category></entry><entry><title>Oh no, not another dev blog</title><link href="https://james.walters.click/oh-no-not-another-dev-blog.html" rel="alternate"></link><published>2022-09-13T00:00:00-04:00</published><updated>2022-09-13T00:00:00-04:00</updated><author><name>James Walters</name></author><id>tag:james.walters.click,2022-09-13:/oh-no-not-another-dev-blog.html</id><summary type="html">&lt;p&gt;Hi there! üëã&lt;/p&gt;
&lt;p&gt;I'm James, and I've decided to start a dev blog. It's a bit of a clich√©, I know, but for me I think it will be a fruitful exercise. I like writing, and I've tried blogging over the years, but I've never really found a good fit for ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hi there! üëã&lt;/p&gt;
&lt;p&gt;I'm James, and I've decided to start a dev blog. It's a bit of a clich√©, I know, but for me I think it will be a fruitful exercise. I like writing, and I've tried blogging over the years, but I've never really found a good fit for something to talk about.&lt;/p&gt;
&lt;p&gt;Programming will be a good fit, I think. This is a new foray for me&amp;mdash;I've been doing development for about a year now, and my first big project at work is well on its way to rolling out next quarter. It's been exciting, and it's been a lot of work. But when I've been coding for 8-10 hours straight and I need a break, or when I need a &lt;a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging"&gt;rubber duck&lt;/a&gt;, or when I &lt;em&gt;want&lt;/em&gt; to code but I shouldn't because I'm being obsessive, this will be a good outlet.&lt;/p&gt;
&lt;p&gt;I hope to share insights of mine that might benefit you, dear reader. Expect opinions as well, and reaches into tech more broadly on occasion. Such excursions are inevitable, but I'm mostly interested in programming here.&lt;/p&gt;
&lt;p&gt;There's no need to belabor introductions, so I'll leave it at that. See you in whatever I write next!&lt;/p&gt;</content><category term="Meta"></category></entry></feed>